[{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/CausalGPS.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"CausalGPS","text":"","code":"library(\"devtools\") install_github(\"NSAPH-Software/CausalGPS\", ref=\"master\") library(\"CausalGPS\")"},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/CausalGPS.html","id":"usage","dir":"Articles","previous_headings":"","what":"Usage","title":"CausalGPS","text":"Input parameters: Y vector observed outcome variable.w vector observed continuous exposure variable.c data.frame matrix observed covariates variable.ci_appr causal inference approach. Possible values : - “matching”: Matching GPS - “weighting”: Weighting GPSgps_model Model type used estimating GPS value, including parametric (default) non-parametric.use_cov_transform TRUE, function uses transformer meet covariate balance.transformers list transformers. transformer unary function. can pass name customized function quotes. Available transformers: - pow2: power 2 - pow3: power 3bin_seq Sequence w (treatment) generate pseudo population. NULL passed default value used, seq(min(w)+delta_n/2,max(w), =delta_n).trim_quantiles numerical vector two. Represents trim quantile level. numbers range [0,1] increasing order (default: c(0.01,0.99)).optimized_compile TRUE, uses counts keep track number replicated pseudo population.params Includes list params used internally. Unrelated parameters ignored.sl_lib: vector prediction algorithms. nthread integer value represents number threads used internal packages.... Additional arguments passed different models.","code":""},{"path":[]},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/CausalGPS.html","id":"causal-inference-approach-ci-appr","dir":"Articles","previous_headings":"Additional parameters","what":"Causal Inference Approach (ci.appr)","title":"CausalGPS","text":"matching_l1: Manhattan distance matching delta_n: caliper parameter. scale: specified scale parameter control relative weight attributed distance measures exposure versus GPS. ‘absolute’ covar_bl_trs: covariate balance threshold covar_bl_trs_type: covariate balance type (mean, median, maximal) max_attempt: maximum number attempt satisfy covariate balance. See create_matching() details parameters default values. covar_bl_method: Covariate balance method. covar_bl_trs: Covariate balance threshold max_attempt: Maximum number attempt satisfy covariate balance. Generating Pseudo Population matching_l1 Manhattan distance matching approach. prediction model use SuperLearner package. SuperLearner supports different machine learning methods packages. params list hyperparameters users can pass third party libraries SuperLearner package. hyperparameters go params list. prefixes used distinguished parameters different libraries. following table shows external package names, equivalent name used sl_lib, prefixes used hyperparameters params list, available hyperparameters. nthread number available threads (cores). XGBoost needs OpenMP installed system parallelize processing. Estimating GPS internal_use set TRUE, program return additional vectors used selected causal inference approach generate pseudo population. See ?estimate_gps details. Estimating Exposure Rate Function Generating Synthetic Data Logging CausalGPS package logging internal activities CausalGPS.log file. file located source file location appended. Users can change logging file name (path) logging threshold. logging mechanism different thresholds (see logger package). two important thresholds INFO DEBUG levels. former, default level, logs general information process. latter, activated, logs detailed information can used debugging purposes.","code":"set.seed(422)  n <- 10000  mydata <- generate_syn_data(sample_size=n)  year <- sample(x=c(\"2001\",\"2002\",\"2003\",\"2004\",\"2005\"),size = n, replace = TRUE)  region <- sample(x=c(\"North\", \"South\", \"East\", \"West\"),size = n, replace = TRUE)  mydata$year <- as.factor(year)  mydata$region <- as.factor(region)  mydata$cf5 <- as.factor(mydata$cf5)                                pseudo_pop <- generate_pseudo_pop(mydata$Y,                              mydata$treat,                              mydata[c(\"cf1\",\"cf2\",\"cf3\",\"cf4\",\"cf5\",\"cf6\",\"year\",\"region\")],                              ci_appr = \"matching\",                              gps_model = \"non-parametric\",                              use_cov_transform = TRUE,                              transformers = list(\"pow2\", \"pow3\", \"abs\", \"scale\"),                              trim_quantiles = c(0.01,0.99),                              optimized_compile = TRUE,                              sl_lib = c(\"m_xgboost\"),                              covar_bl_method = \"absolute\",                              covar_bl_trs = 0.1,                              covar_bl_trs_type = \"mean\",                              max_attempt = 4,                              matching_fun = \"matching_l1\",                              delta_n = 1,                              scale = 0.5,                              nthread = 1)                                                            plot(pseudo_pop) data_with_gps <- estimate_gps(Y,                               w,                               c,                               internal_use = FALSE,                               params = list(xgb_max_depth = c(3,4,5),                                             xgb_rounds = c(10,20,30,40)),                               nthread = 1,                                                               sl_lib = c(\"m_xgboost\")                               ) estimate_npmetric_erf<-function(matched_Y,                                 matched_w,                                 matched_counter = NULL,                                 bw_seq=seq(0.2,2,0.2),                                 w_vals,                                 nthread) syn_data <- generate_syn_data(sample_size=1000,                               outcome_sd = 10,                               gps_spec = 1,                               cova_spec = 1)"},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/Developers-Guide.html","id":"environment-setup","dir":"Articles","previous_headings":"","what":"Environment Setup","title":"Developers Guide","text":"order contribute project, better idea local copy CausalGPS Github account. steps: Navigate CausalGPS Github repository, top right corner, click Fork button. add clone project Github account. Open terminal (Gitbash Windows, Anaconda prompt, …) run following command (brackets included): already SSH key, need generate one. Read . Now, can modify codebase track modification. good idea create new branch work codebase. Read following instructions git branching.","code":"git clone git@github.com:[your user name]/CausalGPS.git"},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/Developers-Guide.html","id":"git-branching-model","dir":"Articles","previous_headings":"","what":"Git Branching Model","title":"Developers Guide","text":"Although, personal repository, can pick branch name, however, order keep consistency also understand working , following convention strongly recommended. project, follow convention proposed Vincent Driessen successful Git branching model post. summary branches: master: master branch hosts released software packages. project maintainers write access master branch. develop: develop branch considered main branch source code HEAD always reflects state latest delivered development changes next release. feature: start new feature branch add new features software. naming convention iss[issue_number]_short_description. example, need add unittest one functions package issue number 12, iss12_add_unittest can valid git branch name. start issue number go back take look issue details necessary. Although feature branches temporary, naming convention helps developers understand situation working codebase. working features open issue , please open issue assign . can also make comment working . hotfix: hotfix branches used fixing bug released package. fixing bug, third digit version number incremented one. example, 2.3.5 –> 2.3.6. branches prefixed hotfix followed upcoming version number (e.g., case, hotfix_2.3.6) release: Release branches support preparation new production release.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/Developers-Guide.html","id":"where-to-submit-pull-requests","dir":"Articles","previous_headings":"","what":"Where to submit pull requests?","title":"Developers Guide","text":"pull requests submitted base repository: NSAPH-Software/CausalGPS base: develop branch.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/Developers-Guide.html","id":"pull-request-checklist","dir":"Articles","previous_headings":"","what":"Pull request checklist","title":"Developers Guide","text":"Please run devtools::document(), devtools::load_all() final modifications. Make sure modified code passes checks tests (can run devtools::check() RStudio) PR pass CI reviews can merge . Add line(s) modification NEWS.md file. adding new features, please make sure appropriate documentation added updated. Please clean white spaces. Read .","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/Developers-Guide.html","id":"reporting-bugs","dir":"Articles","previous_headings":"","what":"Reporting bugs","title":"Developers Guide","text":"Please report potential bugs creating new issue sending us email. Please include following information bug report: brief description , expected happen, happened. OS using whether using personal computer HPC cluster. version package installed.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/Developers-Guide.html","id":"style-guide","dir":"Articles","previous_headings":"","what":"Style Guide","title":"Developers Guide","text":"project, follow tidyverse style guide.","code":""},{"path":[]},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/Developers-Guide.html","id":"names","dir":"Articles","previous_headings":"Style Guide > Summary","what":"Names","title":"Developers Guide","text":"File names snake_case ends .R (e.g., create_matching.R) variable names small letter separate _ need (e.g., delta_n) Function names follow snake_case style (e.g., generate_data) Function names follow verb+output convention (e.g., compute_resid)","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/Developers-Guide.html","id":"spaces-and-indentation","dir":"Articles","previous_headings":"Style Guide > Summary","what":"Spaces and Indentation","title":"Developers Guide","text":"Indentations two spaces (use tab) Place space around binary operators (e.g., x + y) Place space comma Place space # commenting avoid multiple ### put space opening closing parenthesis Place space () used , , .","code":"#Acceptable: z <- x + y  #Not recommended: z<-x+y # (no space) z<- x+y z<-x +y #Acceptable: a <- matrix(c(1:100), nrow = 5)  #Not recommended: a <- matrix(c(1:100),nrow = 5) # (no space after comma) a <- matrix( c(1:100), nrow = 5 ) # (extra space after and before parentheses) a<-matrix(c(1:100), nrow = 5) # (no space around unary operator <- ) #Acceptable: # This is a comment  #Not recommended: #This is a comment #    This is a comment (more than one space after #) ## This is a comment (multiple #) ###    This is a comment (multiple # and more than one space) #Acceptable: x <- (z + y)  #Not recommended: x <- ( z + y ) # (unnecessary space) x <- (z + y ) x <- ( z + y) #Acceptible if (x > 2) {   print(x) }  # Not recommended if(x > 2){   print(x) }"},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/Developers-Guide.html","id":"other-notes","dir":"Articles","previous_headings":"Style Guide > Summary","what":"Other notes","title":"Developers Guide","text":"Maximum line length 80 character Use explicit returns Use explicit tags documentation (e.g., @title, @description, …)","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/Developers-Guide.html","id":"notes-on-superlearner","dir":"Articles","previous_headings":"","what":"Notes on SuperLearner","title":"Developers Guide","text":"package create customized wrapper SuperLearner internal libraries. Please read Notes SL Wrappers details.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/Developers-Guide.html","id":"logger","dir":"Articles","previous_headings":"","what":"Logger","title":"Developers Guide","text":"Use logger investigate internal process. default level “INFO”, writes messages “CausalGPS.log” file. can use update_logger function change log file location level.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/Estimating-GPS.html","id":"available-superlearner-libraries","dir":"Articles","previous_headings":"","what":"Available SuperLearner Libraries","title":"Estimating GPS","text":"users can use library SuperLearner package. However, order control internal libraries generate customized wrappers. following table represents available customized wrappers well hyperparameters.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/Estimating-GPS.html","id":"implementation","dir":"Articles","previous_headings":"","what":"Implementation","title":"Estimating GPS","text":"XGBoost ranger libraries developed efficient processing multiple cores. requirement making sure OpenMP installed system. User needs pass number threads (nthread) running estimate_gps function. following section, conduct several analyses test scalability performance. analyses can used rough estimate expect different data sizes computational resources.","code":""},{"path":[]},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/FAQ.html","id":"how-to-define-a-new-transformer","dir":"Articles","previous_headings":"","what":"1) How to define a new transformer?","title":"Frequently Asked Questions","text":"Transformers unary functions applied covariates. example “power 5”. can pass transformers list \"pow5\".","code":"pow5 <- function(x) {x^5}"},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/FAQ.html","id":"is-the-order-of-transformers-important","dir":"Articles","previous_headings":"","what":"2) Is the order of transformers important?","title":"Frequently Asked Questions","text":"gen_pseudo_pop function tries transformers covariate balance test met previous attempt. covariate worst balance value chosen apply transformer. first transformer list selected purpose. transformer used specific covariate, next value selected.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/FAQ.html","id":"how-change-the-logger-level","dir":"Articles","previous_headings":"","what":"3) How change the logger level?","title":"Frequently Asked Questions","text":"can use set_logger function set logger_level one “TRACE”, “DEBUG”, “INFO”, “SUCCESS”, “WARN”, “ERROR”, ”FATAL”. package internal information logged INFO DEBUG level. need see new information .log file, please consider opening issue .","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/FAQ.html","id":"is-there-any-trade-off-between-number-of-cpu-cores-nthread-and-memory-usage","dir":"Articles","previous_headings":"","what":"4) Is there any trade-off between number of CPU cores (nthread) and memory usage?","title":"Frequently Asked Questions","text":"using spawning mechanism multicore processing. worker processor gets copy required data libraries. case limited available memory large dataset, can reduce number CPU cores (nthread) fit processing system. Following recommendation, processing time increase; however, memory usage decrease.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/FAQ.html","id":"i-am-using-macos-however-i-cannot-see-any-performance-increase-with-increasing-number-of-threads-nthread-","dir":"Articles","previous_headings":"","what":"5) I am using macOS, however, I cannot see any performance increase with increasing number of threads (nthread).","title":"Frequently Asked Questions","text":"Many internal libraries (e.g., XGBoost) dependent OpenMP library parallel computation. Please make sure installed OpenMP library configured correctly. Please see following links details: Installing data.table macOS Installing XGBoost macOS","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/FAQ.html","id":"i-am-running-the-package-on-hpc-however-i-think-the-package-is-using-only-one-core-","dir":"Articles","previous_headings":"","what":"6) I am running the package on HPC; however, I think the package is using only one core.","title":"Frequently Asked Questions","text":"order activate OpenMP HPC, need load required modules. example, using SLURM Cannon Harvard University, need load intel module. Please read .","code":"module load intel/19.0.5-fasrc01 export OMP_NUM_THREADS=$SLURM_CPUS_PER_TASK"},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/Frequently-Asked-Questions.html","id":"how-to-define-a-new-transformer","dir":"Articles","previous_headings":"","what":"1) How to define a new transformer?","title":"Frequently Asked Questions","text":"Transformers unary functions applied covariates. example “power 5”. can pass transformers list \"pow5\".","code":"pow5 <- function(x) {x^5}"},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/Frequently-Asked-Questions.html","id":"is-the-order-of-transformers-important","dir":"Articles","previous_headings":"","what":"2) Is the order of transformers important?","title":"Frequently Asked Questions","text":"gen_pseudo_pop function tries transformers covariate balance test met previous attempt. covariate worst balance value chosen apply transformer. first transformer list selected purpose. transformer used specific covariate, next value selected.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/Frequently-Asked-Questions.html","id":"how-change-the-logger-level","dir":"Articles","previous_headings":"","what":"3) How change the logger level?","title":"Frequently Asked Questions","text":"can use set_logger function set logger_level one “TRACE”, “DEBUG”, “INFO”, “SUCCESS”, “WARN”, “ERROR”, ”FATAL”. package internal information logged INFO DEBUG level. need see new information .log file, please consider opening issue .","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/Frequently-Asked-Questions.html","id":"is-there-any-trade-off-between-number-of-cpu-cores-nthread-and-memory-usage","dir":"Articles","previous_headings":"","what":"4) Is there any trade-off between number of CPU cores (nthread) and memory usage?","title":"Frequently Asked Questions","text":"using spawning mechanism multicore processing. worker processor gets copy required data libraries. case limited available memory large dataset, can reduce number CPU cores (nthread) fit processing system. Following recommendation, processing time increase; however, memory usage decrease.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/Frequently-Asked-Questions.html","id":"i-am-using-macos-however-i-cannot-see-any-performance-increase-with-increasing-number-of-threads-nthread-","dir":"Articles","previous_headings":"","what":"5) I am using macOS, however, I cannot see any performance increase with increasing number of threads (nthread).","title":"Frequently Asked Questions","text":"Many internal libraries (e.g., XGBoost) dependent OpenMP library parallel computation. Please make sure installed OpenMP library configured correctly. Please see following links details: Installing data.table macOS Installing XGBoost macOS","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/Frequently-Asked-Questions.html","id":"i-am-running-the-package-on-hpc-however-i-think-the-package-is-using-only-one-core-","dir":"Articles","previous_headings":"","what":"6) I am running the package on HPC; however, I think the package is using only one core.","title":"Frequently Asked Questions","text":"order activate OpenMP HPC, need load required modules. example, using SLURM Cannon Harvard University, need load intel module. Please read .","code":"module load intel/19.0.5-fasrc01 export OMP_NUM_THREADS=$SLURM_CPUS_PER_TASK"},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/Frequently-Asked-Questions.html","id":"what-is-the-counter_weight-column-in-the-pseudo-population","dir":"Articles","previous_headings":"","what":"7) What is the counter_weight column in the pseudo population?","title":"Frequently Asked Questions","text":"matching weighting approaches find combination original data set pass covariate balance test. case matching, package uses different number data samples. data samples never used; hence counter_weight value 0. data samples probably far common support area, resolution w fine enough. case weighting, inverse probability getting exposure. old versions (ver0.2.9), column counter matching approach ipw weighting approach, respectively.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/Frequently-Asked-Questions.html","id":"is-there-a-public-data-set-that-i-can-test-my-model","dir":"Articles","previous_headings":"","what":"8) Is there a public data set that I can test my model?","title":"Frequently Asked Questions","text":"One can either generate synthetic data using generate_syn_data() function, use synthetic_us_2010 data comes package. datasets mostly L3 data shared public.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/Frequently-Asked-Questions.html","id":"can-a-data-sample-match-with-itself","dir":"Articles","previous_headings":"","what":"9) Can a data sample match with itself?","title":"Frequently Asked Questions","text":"question commonly asked researchers coming matching binary exposures. CausalGPS package (algorithm), exposure level data sample, generate new data sample poses requested exposure level; however, different GPS value. find closest original data (terms w GPS) generated pseudo-data sample. data matched requested exposure level, based original data sample. Therefore context CausalGPS package, correct question.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/Frequently-Asked-Questions.html","id":"where-can-i-get-the-code","dir":"Articles","previous_headings":"","what":"10) Where can I get the code?","title":"Frequently Asked Questions","text":"updated version NSAPH-Software/develop branch latest release NSAPH-Software/master branch.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/Frequently-Asked-Questions.html","id":"how-does-trimming-work","dir":"Articles","previous_headings":"","what":"11) How does trimming work?","title":"Frequently Asked Questions","text":"generate_pseudo_pop() function trims entire data based trimming quantiles. processes (e.g., estimating gps, compiling pseudo population, matching, weighting, …) use trimmed data. Trimming data open research question, many different configurations can considered.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/Frequently-Asked-Questions.html","id":"can-i-use-a-data-with-missing-value","dir":"Articles","previous_headings":"","what":"12) Can I use a data with missing value?","title":"Frequently Asked Questions","text":"Yes. rows missing values eliminated process.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/Generating-Pseudo-Population.html","id":"usage","dir":"Articles","previous_headings":"","what":"Usage","title":"Generating Pseudo Population","text":"Input parameters: Y vector observed outcomew vector observed continues exposurec data frame matrix observed baseline covariatesci_appr causal inference approach. Options “matching”, “weighting”, “adjusting”.matching_fun specified matching functionscale specified scale parameter control relative weight attributed distance measures exposure versus GPS estimatesdelta_n specified caliper parameter exposurecovar_bl_method specified covariate balance methodcovar_bl_trs specified covariate balance thresholdmax_attempt maximum number attempt satisfy covariate balance","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/Generating-Pseudo-Population.html","id":"technical-details-for-matching","dir":"Articles","previous_headings":"","what":"Technical Details for Matching","title":"Generating Pseudo Population","text":"matching algorithm aims match observed unit \\(j\\) \\(j'\\) exposure level \\(w^{(l)}\\). specify delta_n (\\(\\delta_n\\)), caliper exposure level \\(w\\), constitutes equally sized bins, .e., \\([w-\\delta_n, w+\\delta_n]\\). Based caliper delta_n , define predetermined set \\(L\\) exposure levels \\(\\{w^{(1)}=\\min(w)+ \\delta_n,w^{(2)}=\\min(w)+3 \\delta_n,...,w^{(L)} = \\min(w)+(2L-1) \\delta_n\\}\\), \\(L = \\lfloor \\frac{\\max(w)-\\min(w)}{2\\delta_n} + \\frac{1}{2} \\rfloor\\). exposure level \\(w^{(l)}\\) midpoint equally sized bins, \\([w^{(l)}-\\delta_n, w^{(l)}+\\delta_n]\\). implement nested-loop algorithm, \\(l\\) \\(1,2,\\ldots, L\\) outer-loop, \\(j'\\) \\(1 ,\\ldots,N\\) inner-loop. algorithm outputs final product design stage, .e., matched set \\(N\\times L\\) units.\\(l = 1,2,\\ldots, L\\)   Choose one exposure level interest \\(w^{(l)} \\\\{w^{(1)}, w^{(2)}, ..., w^{(L)}\\}\\).   \\(j' = 1 ,\\ldots,N\\)   2.1 Evaluate GPS \\(\\hat{e}(w^{(l)}, \\mathbf{c}_{j'})\\) (short \\(e^{(l)}_{j'}\\)) \\(w^{(l)}\\) based fitted GPS model Step 1 unit \\(j'\\) observed covariates \\(\\mathbf{c}_{j'}\\).   2.2 Implement matching find observed unit – denoted \\(j\\) – matched \\(j'\\) respect exposure \\(w_{j}\\approx w^{(l)}\\) estimated GPS \\(\\hat{e}(w_j, \\mathbf{c}_{j}) \\approx e^{(l)}_{j'}\\) (standardized Euclidean transformation). specifically, find \\(j\\) \\[ j_{{gps}}(e^{(l)}_{j'},w^{(l)})=\\text{arg} \\ \\underset{j: w_j \\[w^{(l)}-\\delta_n,w^{(l)}+\\delta_n]}{\\text{min}} \\ \\mid\\mid( \\lambda \\hat{e}^{*}(w_j,\\mathbf{c}_j), (1-\\lambda)w^{*}_j) -(\\lambda e_{j'}^{(l)*}, (1-\\lambda) w^{(l)*})\\mid\\mid, \\] matching_fun (\\(||.||\\)) pre-specified two-dimensional metric, scale (\\(\\lambda\\)) scale parameter assigning weights corresponding two dimensions (.e., GPS exposure), \\(\\delta\\) caliper defined Step 2 allowing unit \\(j\\) observed exposure \\(w_j \\[w^{(l)}-\\delta,w^{(l)}+\\delta]\\) can get matched.   2.3 Impute \\(Y_{j'}(w^{(l)})\\) : \\(\\hat{Y}_{j'}(w^{(l)})=Y^{obs}_{j_{{gps}}(e^{(l)}_{j'},w^{(l)})}\\).   end end implementing matching algorithm, construct matched set \\(N\\times L\\) units combining \\(\\hat{Y}_{j'}(w^{(l)})\\) \\(j'=1,\\ldots,N\\) \\(w^{(l)} \\\\{w^{(1)},w^{(2)},...,w^{(L)}\\}\\).","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/Generating-Pseudo-Population.html","id":"technical-details-for-covariate-balance","dir":"Articles","previous_headings":"","what":"Technical Details for Covariate Balance","title":"Generating Pseudo Population","text":"introduce absolute correlation measure (covar_bl_method = “absolute”) assess covariate balance continuous exposures . absolute correlation exposure pre-exposure covariate global measure can inform whether whole matched set balanced. measures build upon work (Austin 2019) examine covariate balance conditions continuous exposures. adapt proposed matching framework. balanced pseudo population dataset, correlations exposure pre-exposure covariates close zero, \\(E [\\mathbf{c}_{}^{*} w_{}^{*} ] \\approx \\mathbf{0}.\\) calculate absolute correlation pseudo population dataset \\[\\begin{align*} \\big\\lvert \\sum_{=1}^{N\\times L}  \\mathbf{c}_{}^{*}  w_{}^{*} \\big\\lvert \\end{align*}\\] average absolute correlations defined average absolute correlations among covariates. Average absolute correlation: \\[\\begin{align*} \\overline{\\big\\lvert \\sum_{=1}^{N\\times L} \\mathbf{c}_{}^{*}  w_{}^{*} \\big\\lvert} < \\boldsymbol{\\epsilon}_1. \\end{align*}\\] specify pre-specified threshold covar_bl_trs (\\(\\boldsymbol{\\epsilon}_1\\)), example 0.1, average absolute correlation threshold covariate balance pseudo population dataset.","code":""},{"path":[]},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/Generating-Synthetic-Data.html","id":"usage","dir":"Articles","previous_headings":"","what":"Usage","title":"Generate Synthetic Data","text":"Input parameters: sample_size Number data samples seed seed R’s random number generator outcome_sd Standard deviation used generate outcome gps_spec numerical value (1-7) indicates GPS model used generate synthetic data. See following section details. cova_spec numerical value (1-2) modify covariates. See code details.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/Generating-Synthetic-Data.html","id":"technical-details-for-data-generating-process","dir":"Articles","previous_headings":"","what":"Technical Details for Data Generating Process","title":"Generate Synthetic Data","text":"generate six confounders \\((C_1,C_2,...,C_6)\\), include combination continuous categorical variables, \\[\\begin{align*}     C_1,\\ldots,C_4 \\sim N(0,\\boldsymbol{}_4), C_5 \\sim U\\{-2,2\\}, C_6 \\sim U(-3,3), \\end{align*}\\] generate \\(W\\) using six specifications generalized propensity score model, \\(W = 9 \\{-0.8+ (0.1,0.1,-0.1,0.2,0.1,0.1) \\boldsymbol{C}\\} +17 + N(0,5)\\) \\(W = 15\\{-0.8+ (0.1,0.1,-0.1,0.2,0.1,0.1) \\boldsymbol{C}\\} + 22 + T(2)\\) \\(W = 9 \\{-0.8+ (0.1,0.1,-0.1,0.2,0.1,0.1) \\boldsymbol{C}\\} + 3/2 C_3^2 + 15 + N(0,5)\\) \\(W = \\frac{49 \\exp(\\{-0.8+ (0.1,0.1,-0.1,0.2,0.1,0.1) \\boldsymbol{C}\\})}{1+ \\exp(\\{-0.8+ (0.1,0.1,-0.1,0.2,0.1,0.1) \\boldsymbol{C}\\})} -6 + N(0,5)\\) \\(W = \\frac{42}{1+ \\exp(\\{-0.8+ (0.1,0.1,-0.1,0.2,0.1,0.1) \\boldsymbol{C}\\})} - 18 + N(0,5)\\) \\(W = 7 \\text{log} ( \\{-0.8+ (0.1,0.1,-0.1,0.2,0.1,0.1) \\boldsymbol{C}\\}) + 13 + N(0,4)\\) generate \\(Y\\) outcome model assumed cubical function \\(W\\) additive terms confounders interactions \\(W\\) confounders \\(\\mathbf{C}\\), \\[Y | W, \\mathbf{C} \\sim N\\{\\mu(W, \\mathbf{C}),\\text{sd}^2\\}\\] \\[\\mu(W, \\mathbf{C}) = -10 - (2, 2, 3, -1,2,2)\\mathbf{C}  - W(0.1 - 0.1C_1 + 0.1C_4 + 0.1C_5 + 0.1C_3^2)  + 0.13^2W^3\\]","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/Singularity-Image.html","id":"setting-up-the-environment","dir":"Articles","previous_headings":"","what":"Setting up the environment","title":"Singularity","text":"order build singularity image, need singularity installed system, need root privilege build image. sufficient instructions (example, ). can also use Sylab Remote Builder services.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/Singularity-Image.html","id":"definition-file","dir":"Articles","previous_headings":"","what":"Definition File","title":"Singularity","text":"Definition File (CausalGPS_rstudio.def) recipe building image. Please note build upon [rocker/rstudio:4.0.4] image. details generating Definition File, please refer Singularity User Guide.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/Singularity-Image.html","id":"building-singularity-image","dir":"Articles","previous_headings":"","what":"Building Singularity Image","title":"Singularity","text":"build image, download Definition File (CausalGPS_rstudio.def) run following: Running command generate Singularity image (CausalGPS_rstudio.sif). can double-check CausalGPS package version running image using following command: result following format:","code":"$ sudo singularity build CausalGPS_rstudio.sif CausalGPS_rstudio.def singularity run CausalGPS_rstudio.sif Container was created Thu 03 Feb 2022 07:54:45 PM UTC CausalGPS package installed (ver: [1] ‘0.2.6.9000’)"},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/Singularity-Image.html","id":"run-an-r-session","dir":"Articles","previous_headings":"","what":"Run an R Session","title":"Singularity","text":"want use R console, can follow steps: Run shell command image run R. provide following results activate R. Now, can run R command. example:","code":"singularity shell CausalGPS_rstudio.sif Singularity> R R version 4.0.4 (2021-02-15) -- \"Lost Library Book\" Copyright (C) 2021 The R Foundation for Statistical Computing Platform: x86_64-pc-linux-gnu (64-bit)  R is free software and comes with ABSOLUTELY NO WARRANTY. You are welcome to redistribute it under certain conditions. Type 'license()' or 'licence()' for distribution details.  R is a collaborative project with many contributors. Type 'contributors()' for more information and 'citation()' on how to cite R or R packages in publications.  Type 'demo()' for some demos, 'help()' for on-line help, or 'help.start()' for an HTML browser interface to help. Type 'q()' to quit R.  > > utils::packageVersion(\"CausalGPS\") # [1] ‘0.2.6.9000’"},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/Singularity-Image.html","id":"run-a-rstudio-session","dir":"Articles","previous_headings":"","what":"Run a Rstudio Session","title":"Singularity","text":"can also open RStudio session browser following steps mentioned Rocker Project (Singularity). Open browser enter URL:","code":"mkdir -p run var-lib-rstudio-server  printf 'provider=sqlite\\ndirectory=/var/lib/rstudio-server\\n' > database.conf  singularity exec --bind run:/run,var-lib-rstudio-server:/var/lib/rstudio-server,database.conf:/etc/rstudio/database.conf CausalGPS_rstudio.sif rserver --www-address=127.0.0.1 127.0.0.1:8787"},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/Synthetic-Medicare.html","id":"load-data-and-preprocessing","dir":"Articles","previous_headings":"","what":"Load Data and Preprocessing","title":"Synthetic Medicare Data","text":"","code":"data(\"synthetic_us_2010\") data <- synthetic_us_2010 knitr::kable(head((data))) # transformers pow2 <- function(x) {x^2} pow3 <- function(x) {x^3} clog <- function(x) log(x+0.001)  confounders <- names(data) confounders <- confounders[!(confounders %in% c(\"FIPS\",\"Name\",\"STATE\",                                                  \"STATE_CODE\",\"cms_mortality_pct\",                                                 \"qd_mean_pm25\"))]"},{"path":[]},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/Synthetic-Medicare.html","id":"scenario-1","dir":"Articles","previous_headings":"Examples of Generating Pseudo Population","what":"Scenario 1","title":"Synthetic Medicare Data","text":"Causal Inference: Matching GPS model: Parametric Optimized_compile: True","code":"confounders_s1 <- c(\"cs_poverty\",\"cs_hispanic\",                    \"cs_black\",                    \"cs_ed_below_highschool\",                    \"cs_median_house_value\",                    \"cs_population_density\",                    \"cdc_mean_bmi\",\"cdc_pct_nvsmoker\",                    \"gmet_mean_summer_tmmx\",                    \"gmet_mean_summer_rmx\",                    \"gmet_mean_summer_sph\",                    \"cms_female_pct\", \"region\" )  study_data <- data[, c(\"qd_mean_pm25\", confounders, \"cms_mortality_pct\")] study_data$region <- as.factor(study_data$region) study_data$cs_PIR <- study_data$cs_median_house_value/study_data$cs_household_income  # Choose subset of data q1 <- stats::quantile(study_data$qd_mean_pm25,0.25) q2 <- stats::quantile(study_data$qd_mean_pm25,0.99) trimmed_data <- subset(study_data[stats::complete.cases(study_data) ,],                        qd_mean_pm25 <= q2  & qd_mean_pm25 >= q1)  trimmed_data$gmet_mean_summer_sph <- pow2(trimmed_data$gmet_mean_summer_sph)  set.seed(172) pseudo_pop_1 <- generate_pseudo_pop(trimmed_data$cms_mortality_pct,                                     trimmed_data$qd_mean_pm25,                                     data.frame(trimmed_data[, confounders_s1,                                                             drop=FALSE]),                                     ci_appr = \"matching\",                                     pred_model = \"sl\",                                     gps_model = \"parametric\",                                     bin_seq = NULL,                                     trim_quantiles = c(0.0 ,                                                        1.0),                                     optimized_compile = TRUE,                                     use_cov_transform = TRUE,                                     transformers = list(\"pow2\",\"pow3\",\"clog\"),                                     sl_lib = c(\"m_xgboost\"),                                     params = list(xgb_nrounds=c(17),                                                   xgb_eta=c(0.28)),                                     nthread = 1,                                     covar_bl_method = \"absolute\",                                     covar_bl_trs = 0.1,                                     covar_bl_trs_type = \"mean\",                                     max_attempt = 1,                                     matching_fun = \"matching_l1\",                                     delta_n = 0.1,                                     scale = 1) #> Mean absolute correlation:  0.150596118336646 | Covariate balance threshold:  0.1 #> Loading required package: nnls #> Mean absolute correlation:  0.046174492691644 | Covariate balance threshold:  0.1 #> Covariate balance condition has been met (iteration: 1/1) #> Best Mean absolute correlation:  0.046174492691644 | Covariate balance threshold:  0.1  plot(pseudo_pop_1)"},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/Synthetic-Medicare.html","id":"scenario-2","dir":"Articles","previous_headings":"Examples of Generating Pseudo Population","what":"Scenario 2","title":"Synthetic Medicare Data","text":"Causal Inference: Matching GPS model: Parametric Optimized_compile: False  activating optimized_compile flag, keep track number data samples, instead aggregating . approach result values, however, optimized_compile version consume less memory.","code":"set.seed(172) pseudo_pop_2 <- generate_pseudo_pop(trimmed_data$cms_mortality_pct,                                     trimmed_data$qd_mean_pm25,                                     data.frame(trimmed_data[, confounders_s1,                                                             drop=FALSE]),                                     ci_appr = \"matching\",                                     pred_model = \"sl\",                                     gps_model = \"parametric\",                                     bin_seq = NULL,                                     trim_quantiles = c(0.0 ,                                                        1.0),                                     optimized_compile = FALSE,                                     use_cov_transform = TRUE,                                     transformers = list(\"pow2\",\"pow3\",\"clog\"),                                     sl_lib = c(\"m_xgboost\"),                                     params = list(xgb_nrounds=c(17),                                                   xgb_eta=c(0.28)),                                     nthread = 1,                                     covar_bl_method = \"absolute\",                                     covar_bl_trs = 0.1,                                     covar_bl_trs_type = \"mean\",                                     max_attempt = 1,                                     matching_fun = \"matching_l1\",                                     delta_n = 0.1,                                     scale = 1) #> Mean absolute correlation:  0.150596118336646 | Covariate balance threshold:  0.1 #> Mean absolute correlation:  0.0468679750728689 | Covariate balance threshold:  0.1 #> Covariate balance condition has been met (iteration: 1/1) #> Best Mean absolute correlation:  0.0468679750728689 | Covariate balance threshold:  0.1  plot(pseudo_pop_2) optimized_data_1 <- pseudo_pop_1$pseudo_pop[,c(\"w\",\"gps\",\"counter_weight\")] nonoptimized_data_2 <- pseudo_pop_2$pseudo_pop[,c(\"w\",\"gps\",\"counter_weight\")]   print(paste(\"Number of rows of data in the optimized approach: \",             nrow(optimized_data_1))) #> [1] \"Number of rows of data in the optimized approach:  2300\"  print(paste(\"Number of rows of data in the non-optimized approach: \",             nrow(nonoptimized_data_2))) #> [1] \"Number of rows of data in the non-optimized approach:  140300\"  print(paste(\"Sum of data samples in the optimized approach: \",             sum(optimized_data_1$counter_weight))) #> [1] \"Sum of data samples in the optimized approach:  140300\" print(paste(\"Number of data in the non-optimized approach: \",             length(nonoptimized_data_2$w))) #> [1] \"Number of data in the non-optimized approach:  140300\"  # Replicate gps values of optimized approach expanded_opt_data_1 <- optimized_data_1[rep(seq_len(nrow(optimized_data_1)),                                             optimized_data_1$counter_weight), 1:3]  exp_gps_a_1 <- expanded_opt_data_1$gps gps_b_1 <- nonoptimized_data_2$gps  differences <- sort(gps_b_1) - sort(exp_gps_a_1)  print(paste(\"Sum of differences in gps values between optimized and \",              \"non-optimized approaches is: \",             sum(differences))) #> [1] \"Sum of differences in gps values between optimized and  non-optimized approaches is:  0\""},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/Synthetic-Medicare.html","id":"scenario-3","dir":"Articles","previous_headings":"Examples of Generating Pseudo Population","what":"Scenario 3","title":"Synthetic Medicare Data","text":"Causal Inference: Matching GPS model: Non-Parametric Optimized_compile: True","code":"trimmed_data <- subset(study_data[stats::complete.cases(study_data) ,],                        qd_mean_pm25 <= q2  & qd_mean_pm25 >= q1)  set.seed(8967) pseudo_pop_3 <- generate_pseudo_pop(trimmed_data$cms_mortality_pct,                                       trimmed_data$qd_mean_pm25,                                       data.frame(trimmed_data[, confounders_s1,                                                               drop=FALSE]),                                       ci_appr = \"matching\",                                       pred_model = \"sl\",                                       gps_model = \"non-parametric\",                                       bin_seq = NULL,                                       trim_quantiles = c(0.0 ,                                                          1.0),                                       optimized_compile = TRUE,                                       use_cov_transform = TRUE,                                       transformers = list(\"pow2\",\"pow3\",\"clog\"),                                       sl_lib = c(\"m_xgboost\"),                                       params = list(xgb_nrounds=c(12),                                                     xgb_eta=c(0.1)),                                       nthread = 1,                                       covar_bl_method = \"absolute\",                                       covar_bl_trs = 0.1,                                       covar_bl_trs_type = \"mean\",                                       max_attempt = 1,                                       matching_fun = \"matching_l1\",                                       delta_n = 0.1,                                       scale = 1) #> Mean absolute correlation:  0.150596118336646 | Covariate balance threshold:  0.1 #> Mean absolute correlation:  0.0524109107056938 | Covariate balance threshold:  0.1 #> Covariate balance condition has been met (iteration: 1/1) #> Best Mean absolute correlation:  0.0524109107056938 | Covariate balance threshold:  0.1  plot(pseudo_pop_3)"},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/Synthetic-Medicare.html","id":"scenario-4","dir":"Articles","previous_headings":"Examples of Generating Pseudo Population","what":"Scenario 4","title":"Synthetic Medicare Data","text":"Causal Inference: Weighting GPS model: Parametric Optimized_compile: N/","code":"trimmed_data <- subset(study_data[stats::complete.cases(study_data) ,],                        qd_mean_pm25 <= q2  & qd_mean_pm25 >= q1)  trimmed_data$cs_poverty <- pow2(trimmed_data$cs_poverty)  set.seed(672) pseudo_pop_4 <- generate_pseudo_pop(trimmed_data$cms_mortality_pct,                                       trimmed_data$qd_mean_pm25,                                       data.frame(trimmed_data[, confounders_s1,                                                               drop=FALSE]),                                       ci_appr = \"weighting\",                                       pred_model = \"sl\",                                       gps_model = \"parametric\",                                       bin_seq = NULL,                                       trim_quantiles = c(0.0 ,                                                          1.0),                                       optimized_compile = TRUE,                                       use_cov_transform = TRUE,                                       transformers = list(\"pow2\",\"pow3\",\"clog\"),                                       sl_lib = c(\"m_xgboost\"),                                       params = list(xgb_nrounds=c(35),                                                     xgb_eta=c(0.14)),                                       nthread = 1,                                       covar_bl_method = \"absolute\",                                       covar_bl_trs = 0.1,                                       covar_bl_trs_type = \"mean\",                                       max_attempt = 1,                                       matching_fun = \"matching_l1\",                                       delta_n = 0.1,                                       scale = 1) #> Mean absolute correlation:  0.150596118336646 | Covariate balance threshold:  0.1 #> Mean absolute correlation:  0.0552116564078729 | Covariate balance threshold:  0.1 #> Covariate balance condition has been met (iteration: 1/1) #> Best Mean absolute correlation:  0.0552116564078729 | Covariate balance threshold:  0.1  plot(pseudo_pop_4)"},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/Synthetic-Medicare.html","id":"covariate-balance","dir":"Articles","previous_headings":"","what":"Covariate Balance","title":"Synthetic Medicare Data","text":"previous examples, passed specific parameters estimating GPS values. Achieving acceptable covariate balance can computed searching appropriate parameters might simple task. package uses transformers features get acceptable covariate balance. following parameters directly related searching acceptable covariate balance. covar_bl_trs: acceptable threshold stop searching. can computed either mean, median, maximal value features correlation, defined covar_bl_trs_type. params: different iterations, choose parameter random provided list. example, xgb_nrounds=seq(1,100) parameters, nround parameter xgboost trainer selected number 1 100 random, iteration. transformers: iteration, choose feature highest correlation apply transformer provided list. transformers applied feature reapplying transformer feature. max_attempt: Number test iteration. covar_bl_trs met, search stop max_attempt iteration return best found population.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/Synthetic-Medicare.html","id":"scenario-5","dir":"Articles","previous_headings":"Covariate Balance","what":"Scenario 5","title":"Synthetic Medicare Data","text":"Causal Inference: Matching + searching acceptable covariate balance GPS model: Non-Parametric Optimized_compile: True Search domain: transformers: pow2, pow3, clog. nround xgboost: 10-100. eta xgboost: 0.1-0.5. max_attempt: 5. covar_bl_trs: 0.08. covar_bl_trs_type: mean  example, 5 attempts, find pseudo population can satisfy covariate balance test.","code":"trimmed_data <- subset(study_data[stats::complete.cases(study_data) ,],                        qd_mean_pm25 <= q2  & qd_mean_pm25 >= q1)  set.seed(328) pseudo_pop_5 <- generate_pseudo_pop(trimmed_data$cms_mortality_pct,                                       trimmed_data$qd_mean_pm25,                                       data.frame(trimmed_data[, confounders_s1,                                                               drop=FALSE]),                                       ci_appr = \"matching\",                                       pred_model = \"sl\",                                       gps_model = \"non-parametric\",                                       bin_seq = NULL,                                       trim_quantiles = c(0.0 ,                                                          1.0),                                       optimized_compile = TRUE,                                       use_cov_transform = TRUE,                                       transformers = list(\"pow2\",\"pow3\",\"clog\"),                                       sl_lib = c(\"m_xgboost\"),                                       params = list(xgb_nrounds=seq(10, 100, 1),                                                     xgb_eta=seq(0.1,0.5,0.01)),                                       nthread = 1,                                       covar_bl_method = \"absolute\",                                       covar_bl_trs = 0.08,                                       covar_bl_trs_type = \"mean\",                                       max_attempt = 5,                                       matching_fun = \"matching_l1\",                                       delta_n = 0.1,                                       scale = 1) #> Mean absolute correlation:  0.150596118336646 | Covariate balance threshold:  0.08 #> Mean absolute correlation:  0.123384745637948 | Covariate balance threshold:  0.08 #> Mean absolute correlation:  0.200329942130683 | Covariate balance threshold:  0.08 #> Mean absolute correlation:  0.165235822265409 | Covariate balance threshold:  0.08 #> Mean absolute correlation:  0.160530585591875 | Covariate balance threshold:  0.08 #> Mean absolute correlation:  0.180224262686973 | Covariate balance threshold:  0.08 #> Covariate balance condition has not been met. #> Best Mean absolute correlation:  0.123384745637948 | Covariate balance threshold:  0.08  plot(pseudo_pop_5)"},{"path":[]},{"path":[]},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/Testing-the-Package.html","id":"installing-the-package","dir":"Articles","previous_headings":"Getting the Code","what":"Installing the Package","title":"Testing the Package","text":"Use devtools::install_github install package. specify ref, install master (main) branch. master branch hosts latest released code. latest updates committed develop branch. details please refer Git Branching Model Developers Guide section. process run smoothly. Try ?CausalGPS. open package description page help tab (assuming using RStudio).","code":"library(devtools) try(detach(\"package:CausalGPS\", unload = TRUE), silent = TRUE) # if already you have the package, detach and unload it, to have a new install.  install_github(\"NSAPH-Software/CausalGPS\", ref=\"develop\") library(CausalGPS)"},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/Testing-the-Package.html","id":"cloning-the-package","dir":"Articles","previous_headings":"Getting the Code","what":"Cloning the Package","title":"Testing the Package","text":"Go package Github repository, top left (), choose branch want clone, click Code button (B), choose Download ZIP. following figure shows buttons’ location.  cloning code, open one files using RStudio, change project directory project directory (Session > Set Working Directory > Project Directory).","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/Testing-the-Package.html","id":"forking-the-package","dir":"Articles","previous_headings":"Getting the Code","what":"Forking the package","title":"Testing the Package","text":"Forking explained Contribution page.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/Testing-the-Package.html","id":"package-development-test-check-cycle","dir":"Articles","previous_headings":"","what":"Package development, test, check cycle","title":"Testing the Package","text":"commands need use testing debugging package. can read commands R Packages book. debugging testing, need know steps. list commands need: document() change Roxygen Skeleton (e.g., added new argument function, improved example), run documents(). make sure internal documentation updated. test() runs tests located inside tests/testthat folder. modification code followed running test() make sure breaking existing functionality. check() checks many features (e.g., whether package can installed without problem). need run check() frequently; however, suggest running get code committing make sure errors, warnings, notes. load_all() program source code different one loaded memory (read ). modify part code, need load memory takes latest modifications effect. Run load_all() modification testing. install() cases load_all() sufficient. However, sometimes links package components broken. especially happens significantly change part code, pass tests. cases, may need run install().","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/Testing-the-Package.html","id":"running-examples","dir":"Articles","previous_headings":"","what":"Running Examples","title":"Testing the Package","text":"can use causal inference studies data test package. database needs following attributes: Y: Output value w: Treatment C: covariate matrix package can generate synthetic data can used test different features package. current implementation, code generates synthetic numerical data; however, small innovation, one can add categorical data. following, present reproducible examples can copy build upon .","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/Testing-the-Package.html","id":"generating-synthetic-data","dir":"Articles","previous_headings":"Running Examples","what":"Generating Synthetic Data","title":"Testing the Package","text":"","code":"library(\"CausalGPS\")  mydata <- generate_syn_data(sample_size = 10000)  str(mydata) #'data.frame':  10000 obs. of  8 variables: # $ Y    : num  -17 3.66 -45.88 -12.12 2.75 ... # $ treat: num  9.74 14.88 5.22 10.19 16.65 ... # $ cf1  : num  -0.128 0.155 -1.271 0.551 0.846 ... # $ cf2  : num  0.2376 0.0466 0.8918 -1.8434 -2.4487 ... # $ cf3  : num  1.5492 -0.4453 0.0718 0.8309 0.6749 ... # $ cf4  : num  1.3738 0.8621 0.4735 0.7013 -0.0851 ... # $ cf5  : num  -2 2 1 -2 0 1 1 2 -2 -1 ... # $ cf6  : num  -1.794 -1.822 0.79 -0.591 2.673 ..."},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/Testing-the-Package.html","id":"estimating-gps-values-for-the-dataset","dir":"Articles","previous_headings":"Running Examples","what":"Estimating GPS Values for the Dataset","title":"Testing the Package","text":"following example, first, generate 10000 synthetic data samples, feed estimate_gps function estimate GPS values. Please note Y variable used inside code, provided cbind generated GPS values. can read different arguments documentation (?estimate_gps). summary, - want run code using SuperLearner (sl) prediction model. Inside SuperLearner package, want use XGBoost package. know, internally generate customized wrapper XGBoost package; thus, correct way activate passing m_xgboost, stands modified xgboost. - requested one thread (nthread = 1); can use much want; package use available one ignore rest . XGBoost uses OpenMP backend use cores. Sometimes becomes really big challenge Mac systems. using Mac see performance improvement, aware . - params, passed list parameters; function choose one list random generate customize wrapper based . want use specific value, just give list one number (e.g., xgb_max_depth = c(3)). parameters start xgb_ change XGBoost hyperparameters. Now, let’s add categorical data. Let’s say data belongs 5 different years (2000 observations per year), year data 4 different regions, including North, South, East, West.","code":"library(\"CausalGPS\") mydata <- generate_syn_data(sample_size = 10000)  data_with_gps <- estimate_gps(mydata$Y,                               mydata$treat,                               mydata[c(\"cf1\",\"cf2\",\"cf3\",\"cf4\",\"cf5\",\"cf6\")],                               internal_use = FALSE,                               params = list(xgb_max_depth = c(3,4,5),                                        xgb_nrounds=c(10,20,30,40,50,60)),                               nthread = 1,                               sl_lib = c(\"m_xgboost\")                              ) library(\"CausalGPS\") mydata <- generate_syn_data(sample_size = 10000)   year <- c(rep(c(\"2001\"), each=2000),           rep(c(\"2002\"), each=2000),           rep(c(\"2003\"), each=2000),           rep(c(\"2004\"), each=2000),            rep(c(\"2005\"), each=2000))  region <- rep(c(rep(\"North\",each=500),                 rep(\"South\",each=500),                 rep(\"East\",each=500),                 rep(\"West\",each=500)), each=5)  mydata$year <- as.factor(year) mydata$region <- as.factor(region)  data_with_gps <- estimate_gps(mydata$Y,                               mydata$treat,                               mydata[c(\"cf1\",\"cf2\",\"cf3\",\"cf4\",\"cf5\",\"cf6\", \"year\", \"region\")],                               internal_use = FALSE,                               params = list(xgb_max_depth = c(3,4,5),                                        xgb_nrounds=c(10,20,30,40,50,60)),                               nthread = 1,                               sl_lib = c(\"m_xgboost\")                              )"},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/Testing-the-Package.html","id":"generating-pseudo-population","dir":"Articles","previous_headings":"Running Examples","what":"Generating Pseudo Population","title":"Testing the Package","text":"Generating pseudo population (gen_pseudo_pop())one important parts package. internally uses estimate_gps() package. acceptable pseudo population pass covariate balance test. Users choose test threshold, many attempts. covariate balance test met, function stops trying returns generated population. However, pass test, still returns generated message user indicating population pass test. iteration, change hyperparameters modify GPS values (better worse) pass covariate balance test. estimating GPS values, need compile population. three major approaches compile pseudo population, including: Matching Adjusting (implemented) Weighting (implemented) Among different methods testing covariate balance test, absolute approach implemented. second causal inference approach weighting. example generate pseudo population using weighting approach.","code":"library(\"CausalGPS\") mydata <- generate_syn_data(sample_size = 10000)  pseudo_pop <- generate_pseudo_pop(mydata$Y,                                   mydata$treat,                                   mydata[c(\"cf1\",\"cf2\",\"cf3\",\"cf4\",\"cf5\",\"cf6\")],                                   ci_appr = \"matching\",                                   sl_lib = c(\"m_xgboost\"),                                   params = list(xgb_nrounds=c(10,20,30),                                   xgb_eta=c(0.1,0.2,0.3)),                                   nthread = 1,                                   covar_bl_method = \"absolute\",                                   covar_bl_trs = 0.1,                                   covar_bl_trs_type= \"mean\",                                   max_attempt = 1,                                   matching_fun = \"matching_l1\",                                   delta_n = 1,                                   scale = 0.5) mydata <- generate_syn_data(sample_size = 10000)   year <- c(rep(c(\"2001\"), each=2000),           rep(c(\"2002\"), each=2000),           rep(c(\"2003\"), each=2000),           rep(c(\"2004\"), each=2000),            rep(c(\"2005\"), each=2000))  region <- rep(c(rep(\"North\",each=500),                 rep(\"South\",each=500),                 rep(\"East\",each=500),                 rep(\"West\",each=500)), each=5)  mydata$year <- as.factor(year) mydata$region <- as.factor(region)  pseudo_pop <- generate_pseudo_pop(mydata$Y,                                   mydata$treat,                                   mydata[c(\"cf1\",\"cf2\",\"cf3\",\"cf4\",\"cf5\",\"cf6\",\"year\",\"region\")],                                   ci_appr = \"weighting\",                                   sl_lib = c(\"m_xgboost\"),                                   params = list(xgb_nrounds=c(10,20,30),                                    xgb_eta=c(0.1,0.2,0.3)),                                   nthread = 1,                                   covar_bl_method = \"absolute\",                                   covar_bl_trs = 0.1,                                   covar_bl_trs_type = \"mean\",                                   max_attempt = 1                                   )"},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/Testing-the-Package.html","id":"further-processing","dir":"Articles","previous_headings":"Running Examples","what":"Further Processing","title":"Testing the Package","text":"generating pseudo population, can process data different purposes. far, estimating exposure rate function (estimate_erf) implemented.","code":"# library(\"CausalGPS\") mydata <- generate_syn_data(sample_size = 10000)  pseudo_pop <- generate_pseudo_pop(mydata$Y,                                   mydata$treat,                                   mydata[c(\"cf1\",\"cf2\",\"cf3\",\"cf4\",\"cf5\",\"cf6\")],                                   ci_appr = \"matching\",                                   sl_lib = c(\"m_xgboost\"),                                   params = list(xgb_nrounds=c(10,20,30),                                    xgb_eta=c(0.1,0.2,0.3)),                                   nthread = 1,                                   covar_bl_method = \"absolute\",                                   covar_bl_trs = 0.1,                                   covar_bl_trs_type= \"mean\",                                   max_attempt = 1,                                   matching_fun = \"matching_l1\",                                   delta_n = 1,                                   scale = 0.5)  erf_val <- estimate_npmetric_erf(pseudo_pop$pseudo_pop$Y,                                  pseudo_pop$pseudo_pop$w,                                  bw_seq=seq(0.2,2,0.2),                                  w_vals = seq(2,20,0.5))"},{"path":"https://NSAPH-Software.github.io/CausalGPS/articles/Testing-the-Package.html","id":"steps-for-using-precomputed-data-during-the-test","dir":"Articles","previous_headings":"","what":"Steps for using precomputed data during the test","title":"Testing the Package","text":"package tested different data samples, generated testing, others generated just loaded. data located “R/sysdata.rda” file. add new features code, may need use external pre-computed data set test functions. following, explain steps append data “R/sysdata.rda”. Please note CRAN might reject large data sets. Step 1: Run check() make sure file -satisfies test requirements. raises error, warning, note, please address modifying data. rare cases, check() pass successfully, however, test() . sufficient changing data; however, need address submitting pull request. Step 2: Create backup data current data. Step 3: Clean Global environment Step 4: Load current data store names Step 5: Generate data (mydata) make sure add steps reproduce data comment test file. Step 6: Add new data name list_names. Please note quotes. need add data, just name. Step 7: Save data. Step 8: Run check()/test() make sure passes tests. pass tests, address problem. Step 9: successful check()/pass() remove backup file.","code":"# in terminal cp  R/sysdata.rda R/sysdata_backup.rda rm(list=ls()) load(\"R/sysdata.rd\") list_names <- ls() list_names <- c(list_names, \"mydata\") save(list=list_names, file=\"R/sysdata.rda\")"},{"path":"https://NSAPH-Software.github.io/CausalGPS/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Naeem Khoshnevis. Author, maintainer.            FASRC Xiao Wu. Author.            HSPH Danielle Braun. Author.            HSPH","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wu, X., Mealli, F., Kioumourtzoglou, M.., Dominici, F. Braun, D., 2018. Matching generalized propensity scores continuous exposures. arXiv preprint arXiv:1812.06575.","code":"@Article{,   title = {{Matching on generalized propensity scores with continuous exposures}},   author = {Xiao Wu and Fabrizia Mealli and Marianthi-Anna Kioumourtzoglou and Francesca Dominici and Danielle Braun},   year = {2018},   journal = {arXiv preprint arXiv:1812.06575},   url = {https://arxiv.org/abs/1812.06575}, }"},{"path":[]},{"path":"https://NSAPH-Software.github.io/CausalGPS/index.html","id":"summary","dir":"","previous_headings":"","what":"Summary","title":"Implementing matching, and weighting on GPS with continuous exposures.","text":"R package implementing matching, weighting generalized propensity scores continuous exposures. developed innovative approach estimating causal effects using observational data settings continuous exposures, introduce new framework GPS caliper matching jointly matches estimated GPS exposure levels fully adjust confounding bias.","code":""},{"path":[]},{"path":"https://NSAPH-Software.github.io/CausalGPS/index.html","id":"estimating-gps","dir":"","previous_headings":"Features","what":"Estimating GPS","title":"Implementing matching, and weighting on GPS with continuous exposures.","text":"generalized propensity scores computed using various parametric /non-parametric models. generalized propensity scores used following causal inference approaches.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/index.html","id":"generating-pseudo-population","dir":"","previous_headings":"Features","what":"Generating Pseudo Population","title":"Implementing matching, and weighting on GPS with continuous exposures.","text":"Pseudo population dataset computed based user-defined causal inference approaches (e.g., matching weighting). covariate balance test performed pseudo population dataset. Users can specify covariate balance criteria activate adaptive approach number attempts search target pseudo population dataset meets covariate balance criteria.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/index.html","id":"outcome-models","dir":"","previous_headings":"Features","what":"Outcome Models","title":"Implementing matching, and weighting on GPS with continuous exposures.","text":"Several outcome models can achieved using generated pseudo population dataset. Users can specify non-/semi-parametric models obtain exposure-response curves parametric models obtain regression coefficients interest.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/index.html","id":"acknowledgments","dir":"","previous_headings":"Features > Outcome Models","what":"Acknowledgments","title":"Implementing matching, and weighting on GPS with continuous exposures.","text":"Funding provided Health Effects Institute grant 4953-RFA14-3/16-4, Environmental Protection Agency grant 83587201-0, National Institute Health grants R01 ES026217, R01 MD012769, R01 ES028033, 1R01 ES030616, 1R01 AG066793-01R01, 1R01 ES029950, R01 ES028033-S1, Alfred P. Sloan Foundation grant G-2020-13946.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/CausalGPS-package.html","id":null,"dir":"Reference","previous_headings":"","what":"The 'CausalGPS' package. — CausalGPS-package","title":"The 'CausalGPS' package. — CausalGPS-package","text":"R package implementing matching weighting generalized propensity scores continuous exposures.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/CausalGPS-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The 'CausalGPS' package. — CausalGPS-package","text":"developed innovative approach estimating causal effects using observational data settings continuous exposures, introduce new framework GPS caliper matching.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/CausalGPS-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The 'CausalGPS' package. — CausalGPS-package","text":"Wu, X., Mealli, F., Kioumourtzoglou, M.., Dominici, F. Braun, D., 2018. Matching generalized propensity scores continuous exposures. arXiv preprint arXiv:1812.06575. Kennedy, E.H., Ma, Z., McHugh, M.D. Small, D.S., 2017. Non-parametric methods doubly robust estimation continuous treatment effects. Journal Royal Statistical Society: Series B (Statistical Methodology), 79(4), pp.1229-1245.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/CausalGPS-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The 'CausalGPS' package. — CausalGPS-package","text":"Naeem Khoshnevis Xiao Wu Danielle Braun","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/absolute_corr_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Covariate Balance Using Absolute Approach — absolute_corr_fun","title":"Check Covariate Balance Using Absolute Approach — absolute_corr_fun","text":"Checks covariate balance based absolute correlations given data sets.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/absolute_corr_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Covariate Balance Using Absolute Approach — absolute_corr_fun","text":"","code":"absolute_corr_fun(w, c)"},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/absolute_corr_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Covariate Balance Using Absolute Approach — absolute_corr_fun","text":"w vector observed continuous exposure variable. c data table observed covariates variable.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/absolute_corr_fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Covariate Balance Using Absolute Approach — absolute_corr_fun","text":"function returns list including: absolute_corr: absolute correlations pre-exposure covariates; mean_absolute_corr: average absolute correlations pre-exposure covariates.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/absolute_corr_fun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Covariate Balance Using Absolute Approach — absolute_corr_fun","text":"","code":"set.seed(291) n <- 100 mydata <- generate_syn_data(sample_size=100) year <- sample(x=c(\"2001\",\"2002\",\"2003\",\"2004\",\"2005\"),size = n, replace = TRUE) region <- sample(x=c(\"North\", \"South\", \"East\", \"West\"),size = n, replace = TRUE) mydata$year <- as.factor(year) mydata$region <- as.factor(region) mydata$cf5 <- as.factor(mydata$cf5) data.table::setDT(mydata) cor_val <- absolute_corr_fun(mydata[,2], mydata[, 3:length(mydata)]) print(cor_val$mean_absolute_corr) #> [1] 0.1909401"},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/absolute_weighted_corr_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Check  Weighted Covariate Balance Using Absolute Approach — absolute_weighted_corr_fun","title":"Check  Weighted Covariate Balance Using Absolute Approach — absolute_weighted_corr_fun","text":"Checks covariate balance based absolute weighted correlations given data sets.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/absolute_weighted_corr_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check  Weighted Covariate Balance Using Absolute Approach — absolute_weighted_corr_fun","text":"","code":"absolute_weighted_corr_fun(w, vw, c)"},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/absolute_weighted_corr_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check  Weighted Covariate Balance Using Absolute Approach — absolute_weighted_corr_fun","text":"w vector observed continuous exposure variable. vw vector weights. c data.table observed covariates variable.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/absolute_weighted_corr_fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check  Weighted Covariate Balance Using Absolute Approach — absolute_weighted_corr_fun","text":"function returns list saved measure related covariate balance absolute_corr: absolute correlations pre-exposure covairates; mean_absolute_corr: average absolute correlations pre-exposure covairates.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/absolute_weighted_corr_fun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check  Weighted Covariate Balance Using Absolute Approach — absolute_weighted_corr_fun","text":"","code":"set.seed(639) n <- 100 mydata <- generate_syn_data(sample_size=100) year <- sample(x=c(\"2001\",\"2002\",\"2003\",\"2004\",\"2005\"),size = n, replace = TRUE) region <- sample(x=c(\"North\", \"South\", \"East\", \"West\"),size = n, replace = TRUE) mydata$year <- as.factor(year) mydata$region <- as.factor(region) mydata$cf5 <- as.factor(mydata$cf5) data.table::setDT(mydata) cor_val <- absolute_weighted_corr_fun(mydata[,2],                                       data.table::data.table(runif(n)),                                       mydata[, 3:length(mydata)]) print(cor_val$mean_absolute_corr) #> [1] 0.1461376"},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/autoplot.gpsm_erf.html","id":null,"dir":"Reference","previous_headings":"","what":"A helper function for gpsm_erf object — autoplot.gpsm_erf","title":"A helper function for gpsm_erf object — autoplot.gpsm_erf","text":"helper function plot gpsm_erf object using ggplot2 package.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/autoplot.gpsm_erf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A helper function for gpsm_erf object — autoplot.gpsm_erf","text":"","code":"# S3 method for gpsm_erf autoplot(object, ...)"},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/autoplot.gpsm_erf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A helper function for gpsm_erf object — autoplot.gpsm_erf","text":"object gpsm_erf object. ... Additional arguments passed customize plot.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/autoplot.gpsm_erf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A helper function for gpsm_erf object — autoplot.gpsm_erf","text":"Returns ggplot object.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/autoplot.gpsm_pspop.html","id":null,"dir":"Reference","previous_headings":"","what":"A helper function for gpsm_pspop object — autoplot.gpsm_pspop","title":"A helper function for gpsm_pspop object — autoplot.gpsm_pspop","text":"helper function plot gpsm_pspop object using ggplot2 package.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/autoplot.gpsm_pspop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A helper function for gpsm_pspop object — autoplot.gpsm_pspop","text":"","code":"# S3 method for gpsm_pspop autoplot(object, ...)"},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/autoplot.gpsm_pspop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A helper function for gpsm_pspop object — autoplot.gpsm_pspop","text":"object gpsm_pspop object. ... Additional arguments passed customize plot.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/autoplot.gpsm_pspop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A helper function for gpsm_pspop object — autoplot.gpsm_pspop","text":"Returns ggplot object.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/check_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Additional Arguments — check_args","title":"Check Additional Arguments — check_args","text":"Checks additional arguments user needs provide different prediction models.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/check_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Additional Arguments — check_args","text":"","code":"check_args(   ci_appr,   use_cov_transform,   transformers,   gps_model,   trim_quantiles,   optimized_compile,   ... )"},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/check_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Additional Arguments — check_args","text":"ci_appr causal inference approach. use_cov_transform logical value (TRUE/FALSE) use covariate balance transforming. transformers list transformers. ... Additional named arguments passed.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/check_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Additional Arguments — check_args","text":"TRUE requirements met. Raises error otherwise.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/check_args_compile_pseudo_pop.html","id":null,"dir":"Reference","previous_headings":"","what":"Check compile_pseudo_pop function arguments — check_args_compile_pseudo_pop","title":"Check compile_pseudo_pop function arguments — check_args_compile_pseudo_pop","text":"additional arguments provided.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/check_args_compile_pseudo_pop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check compile_pseudo_pop function arguments — check_args_compile_pseudo_pop","text":"","code":"check_args_compile_pseudo_pop(ci_appr, optimized_compile, ...)"},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/check_args_compile_pseudo_pop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check compile_pseudo_pop function arguments — check_args_compile_pseudo_pop","text":"... Additional arguments successfully run selected ci_appr. data_obj S3 object dataset required parameter. ci.appr selected causal inference approach.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/check_args_compile_pseudo_pop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check compile_pseudo_pop function arguments — check_args_compile_pseudo_pop","text":"Returns True passes checks, successfully. Otherwise raises ERROR.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/check_args_estimate_gps.html","id":null,"dir":"Reference","previous_headings":"","what":"Check estimate_gps function arguments — check_args_estimate_gps","title":"Check estimate_gps function arguments — check_args_estimate_gps","text":"Checks estimate_gps function arguments make sure required additional arguments provided.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/check_args_estimate_gps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check estimate_gps function arguments — check_args_estimate_gps","text":"","code":"check_args_estimate_gps(gps_model, ...)"},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/check_args_estimate_gps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check estimate_gps function arguments — check_args_estimate_gps","text":"gps_model Model type used estimating GPS value, including parametric non-parametric. ... Additional arguments successfully run process.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/check_args_estimate_gps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check estimate_gps function arguments — check_args_estimate_gps","text":"Returns True passes checks, successfully. Otherwise raises ERROR.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/check_args_use_cov_transformers.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Covariate Balance Transformers Argument — check_args_use_cov_transformers","title":"Check Covariate Balance Transformers Argument — check_args_use_cov_transformers","text":"Checks Covariate Balance Transformers terms using available transformers.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/check_args_use_cov_transformers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Covariate Balance Transformers Argument — check_args_use_cov_transformers","text":"","code":"check_args_use_cov_transformers(use_cov_transform, transformers)"},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/check_args_use_cov_transformers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Covariate Balance Transformers Argument — check_args_use_cov_transformers","text":"use_cov_transform logical value (TRUE/FALSE) use covariate balance transforming. transformers list transformers.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/check_args_use_cov_transformers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Covariate Balance Transformers Argument — check_args_use_cov_transformers","text":"TRUE passes tests.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/check_covar_balance.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Covariate Balance — check_covar_balance","title":"Check Covariate Balance — check_covar_balance","text":"Checks covariate balance original population pseudo population.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/check_covar_balance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Covariate Balance — check_covar_balance","text":"","code":"check_covar_balance(   w,   c,   ci_appr,   optimized_compile,   counter_weight = NULL,   nthread = 1,   ... )"},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/check_covar_balance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Covariate Balance — check_covar_balance","text":"w vector observed continuous exposure variable. c data.frame observed covariates variable. ci_appr causal inference approach. optimized_compile TRUE, use optimized compile approach. counter_weight weight vector different situations. matching approach selected, integer data.table counters. case weighting approach, weight data.table. nthread number available threads. ... Additional arguments passed different models.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/check_covar_balance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Covariate Balance — check_covar_balance","text":"output object: corr_results absolute_corr mean_absolute_corr pass (TRUE,FALSE)","code":""},{"path":[]},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/check_covar_balance.html","id":"additional-parameters","dir":"Reference","previous_headings":"","what":"Additional parameters","title":"Check Covariate Balance — check_covar_balance","text":"ci_appr == matching: covar_bl_method covar_bl_trs","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/check_covar_balance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Covariate Balance — check_covar_balance","text":"","code":"set.seed(422) n <- 100 mydata <- generate_syn_data(sample_size=100) year <- sample(x=c(\"2001\",\"2002\",\"2003\",\"2004\",\"2005\"),size = n, replace = TRUE) region <- sample(x=c(\"North\", \"South\", \"East\", \"West\"),size = n, replace = TRUE) mydata$year <- as.factor(year) mydata$region <- as.factor(region) mydata$cf5 <- as.factor(mydata$cf5)    pseudo_pop <- generate_pseudo_pop(mydata$Y,                                  mydata$treat,                                  mydata[c(\"cf1\",\"cf2\",\"cf3\",\"cf4\",\"cf5\",\"cf6\",\"year\",\"region\")],                                  ci_appr = \"matching\",                                  pred_model = \"sl\",                                  gps_model = \"non-parametric\",                                  trim_quantiles = c(0.01,0.99),                                  optimized_compile = TRUE,                                  sl_lib = c(\"m_xgboost\"),                                  covar_bl_method = \"absolute\",                                  covar_bl_trs = 0.1,                                  covar_bl_trs_type = \"mean\",                                  max_attempt = 1,                                  matching_fun = \"matching_l1\",                                  delta_n = 1,                                  scale = 0.5,                                  nthread = 1) #> Mean absolute correlation:  0.146209278430226 | Covariate balance threshold:  0.1 #> Loading required package: nnls #> Mean absolute correlation:  0.329695962727922 | Covariate balance threshold:  0.1 #> Covariate balance condition has not been met. #> Best Mean absolute correlation:  0.329695962727922 | Covariate balance threshold:  0.1  adjusted_corr_obj <- check_covar_balance(w = pseudo_pop$pseudo_pop[, c(\"w\")],                                         c = pseudo_pop$pseudo_pop[ ,                                         pseudo_pop$covariate_cols_name,                                          with=FALSE],                                         counter = pseudo_pop$pseudo_pop[, c(\"counter_weight\")],                                         ci_appr=\"matching\",                                         nthread=1,                                         covar_bl_method = \"absolute\",                                         covar_bl_trs = 0.1,                                         covar_bl_trs_type = \"mean\",                                         optimized_compile=TRUE) #> Mean absolute correlation:  0.329695962727922 | Covariate balance threshold:  0.1"},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/compile_pseudo_pop.html","id":null,"dir":"Reference","previous_headings":"","what":"Compile Pseudo Population — compile_pseudo_pop","title":"Compile Pseudo Population — compile_pseudo_pop","text":"Compiles pseudo population based original population estimated GPS value.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/compile_pseudo_pop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compile Pseudo Population — compile_pseudo_pop","text":"","code":"compile_pseudo_pop(   data_obj,   ci_appr,   gps_model,   bin_seq,   nthread,   optimized_compile,   ... )"},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/compile_pseudo_pop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compile Pseudo Population — compile_pseudo_pop","text":"data_obj S3 object including following: Original data set + GPS values (Y, w, GPS, counter, row_index, c) e_gps_pred e_gps_std_pred w_resid gps_mx (min max gps) w_mx (min max w). ci_appr Causal inference approach. gps_model Model type used estimating GPS value, including parametric non-parametric. bin_seq Sequence w (treatment) generate pseudo population. NULL passed default value used, seq(min(w)+delta_n/2,max(w), =delta_n). nthread integer value represents number threads used internal packages. optimized_compile TRUE, uses counts keep track number replicated pseudo population. ... Additional parameters.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/compile_pseudo_pop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compile Pseudo Population — compile_pseudo_pop","text":"compile_pseudo_pop returns pseudo population data compiled based selected causal inference approach.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/compile_pseudo_pop.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Compile Pseudo Population — compile_pseudo_pop","text":"input data set output estimate_gps function internal_use flag activated.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/compile_pseudo_pop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compile Pseudo Population — compile_pseudo_pop","text":"","code":"set.seed(112) m_d <- generate_syn_data(sample_size = 100) data_with_gps <- estimate_gps(m_d$Y,                               m_d$treat,                               m_d[c(\"cf1\",\"cf2\",\"cf3\",\"cf4\",\"cf5\",\"cf6\")],                               pred_model = \"sl\",                               gps_model = \"parametric\",                               internal_use = TRUE,                               params = list(xgb_max_depth = c(3,4,5),                                        xgb_nrounds=c(10,20,30,40,50,60)),                               nthread = 1,                               sl_lib = c(\"m_xgboost\")                              )   pd <- compile_pseudo_pop(data_obj = data_with_gps,                          ci_appr = \"matching\",                          gps_model = \"parametric\",                          bin_seq = NULL,                          nthread = 1,                          optimized_compile=TRUE,                          matching_fun = \"matching_l1\",                          covar_bl_method = 'absolute',                          covar_bl_trs = 0.1,                          covar_bl_trs_type= \"mean\",                          delta_n = 0.5,                          scale = 1)"},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/compute_closest_wgps.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the closest data in subset to the original data — compute_closest_wgps","title":"Find the closest data in subset to the original data — compute_closest_wgps","text":"function compute closest data subset data original data based two attributes: vector scalar (vector size one).","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/compute_closest_wgps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the closest data in subset to the original data — compute_closest_wgps","text":"","code":"compute_closest_wgps(a, b, c, d, sc, nthread)"},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/compute_closest_wgps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the closest data in subset to the original data — compute_closest_wgps","text":"Vector first attribute values subset data. b Vector first attribute values data. c Vector second attribute values subset data. d Vector size one second attribute value. sc Scale parameter give weight two mentioned measurements. nthread Number available cores.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/compute_closest_wgps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the closest data in subset to the original data — compute_closest_wgps","text":"function returns index subset data closest original data sample.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/compute_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Approximate density based on another vector — compute_density","title":"Approximate density based on another vector — compute_density","text":"function impute missing values based density estimation another vector removing missing values.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/compute_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Approximate density based on another vector — compute_density","text":"","code":"compute_density(x0, x1)"},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/compute_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Approximate density based on another vector — compute_density","text":"x0 vector x1 vector","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/compute_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Approximate density based on another vector — compute_density","text":"Returns approximation density value vector x1 based vector x0.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/compute_min_max.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute minimum and maximum — compute_min_max","title":"Compute minimum and maximum — compute_min_max","text":"Function compute minimum maximum input vector","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/compute_min_max.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute minimum and maximum — compute_min_max","text":"","code":"compute_min_max(x)"},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/compute_min_max.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute minimum and maximum — compute_min_max","text":"x vector","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/compute_min_max.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute minimum and maximum — compute_min_max","text":"Returns vector length 2. first element min value, second element max value.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/compute_outer.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes distance on all possible combinations — compute_outer","title":"Computes distance on all possible combinations — compute_outer","text":"Computes distance combination elements two vector. vector size n, b vector size m, result, matrix size(n,m)","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/compute_outer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes distance on all possible combinations — compute_outer","text":"","code":"compute_outer(a, b, op)"},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/compute_outer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes distance on all possible combinations — compute_outer","text":"first vector (size n) b second vector (size m) op operator (e.g., '-', '+', '/', ...)","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/compute_outer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes distance on all possible combinations — compute_outer","text":"n m matrix includes abs difference elements vector b.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/compute_resid.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Residual — compute_resid","title":"Compute Residual — compute_resid","text":"Function compute residual","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/compute_resid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Residual — compute_resid","text":"","code":"compute_resid(a, b, c)"},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/compute_resid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Residual — compute_resid","text":"vector b vector c vector","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/compute_resid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Residual — compute_resid","text":"returns residual values.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/compute_risk.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute risk value — compute_risk","title":"Compute risk value — compute_risk","text":"Calculates cross-validated risk optimal bandwidth selection kernel smoothing approach.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/compute_risk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute risk value — compute_risk","text":"","code":"compute_risk(h, matched_Y, matched_w, w_vals)"},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/compute_risk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute risk value — compute_risk","text":"h scalar representing bandwidth value. matched_Y vector outcome variable matched set. matched_w vector continuous exposure variable matched set. w_vals vector values want calculate values ERF .","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/compute_risk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute risk value — compute_risk","text":"returns cross-validated risk value input bandwidth","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/convert_data_into_standard_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Put original data into package standard data — convert_data_into_standard_format","title":"Put original data into package standard data — convert_data_into_standard_format","text":"temporal function convert original data package standard data. function removed addressing issue #67: \"convert accessing data column index column name #67\"","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/convert_data_into_standard_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Put original data into package standard data — convert_data_into_standard_format","text":"","code":"convert_data_into_standard_format(Y, w, c, q1, q2, ci_appr)"},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/convert_data_into_standard_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Put original data into package standard data — convert_data_into_standard_format","text":"Y Output vector w Treatment exposure vector c Covariate matrix ci_appr Causal Inference approach","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/convert_data_into_standard_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Put original data into package standard data — convert_data_into_standard_format","text":"Original data place holder columns.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/create_matching.html","id":null,"dir":"Reference","previous_headings":"","what":"Create pseudo population using matching casual inference approach — create_matching","title":"Create pseudo population using matching casual inference approach — create_matching","text":"Generates pseudo population based matching casual inference method.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/create_matching.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create pseudo population using matching casual inference approach — create_matching","text":"","code":"create_matching(   dataset,   bin_seq = NULL,   gps_model = \"parametric\",   nthread = 1,   optimized_compile,   ... )"},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/create_matching.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create pseudo population using matching casual inference approach — create_matching","text":"dataset list 6 elements. Including original dataset well helper vectors estimating GPS. See compile_pseudo_pop() details. bin_seq Sequence w (treatment) generate pseudo population. NULL passed default value used, seq(min(w)+delta_n/2,max(w), =delta_n). gps_model Model type used estimating GPS value, including parametric (default) non-parametric. nthread Number available cores. optimized_compile Option activate optimized compilation. ... Additional arguments passed function.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/create_matching.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create pseudo population using matching casual inference approach — create_matching","text":"Returns data.table matched set.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/create_weighting.html","id":null,"dir":"Reference","previous_headings":"","what":"Create pseudo population using weighting casual inference approach — create_weighting","title":"Create pseudo population using weighting casual inference approach — create_weighting","text":"Generates pseudo population based weighting casual inference method.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/create_weighting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create pseudo population using weighting casual inference approach — create_weighting","text":"","code":"create_weighting(dataset, ...)"},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/create_weighting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create pseudo population using weighting casual inference approach — create_weighting","text":"dataset study data set. ... Additional parameters.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/create_weighting.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create pseudo population using weighting casual inference approach — create_weighting","text":"Returns data table includes following columns: Y w gps counter row_index ipw covariates","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/estimate_gps.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate GPS Values — estimate_gps","title":"Estimate GPS Values — estimate_gps","text":"Estimates GPS value observation using parametric non-parametric approaches.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/estimate_gps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate GPS Values — estimate_gps","text":"","code":"estimate_gps(   Y,   w,   c,   gps_model = \"parametric\",   internal_use = TRUE,   params = list(),   sl_lib = c(\"m_xgboost\"),   nthread = 1,   ... )"},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/estimate_gps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate GPS Values — estimate_gps","text":"Y vector observed outcome variable. w vector observed continuous exposure variable. c data frame observed covariates variable. gps_model Model type used estimating GPS value, including parametric (default) non-parametric. internal_use TRUE return helper vectors well. Otherwise, return original data + GPS values. params Includes list parameters used internally. Unrelated parameters ignored. sl_lib vector prediction algorithms. nthread integer value represents number threads used shared memory system. ... Additional arguments passed model.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/estimate_gps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate GPS Values — estimate_gps","text":"function returns S3 object. Including following: Original data set + GPS, counter, row_index values (Y, w, GPS, counter_weight, row_index, c) e_gps_pred e_gps_std_pred w_resid gps_mx (min max gps) w_mx (min max w). used_params","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/estimate_gps.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Estimate GPS Values — estimate_gps","text":"internal.use set FALSE, original data set + GPS returned. outcome variable used estimating GPS value. However, used compiling data set GPS values.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/estimate_gps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate GPS Values — estimate_gps","text":"","code":"m_d <- generate_syn_data(sample_size = 100) data_with_gps <- estimate_gps(m_d$Y,                               m_d$treat,                               m_d[c(\"cf1\",\"cf2\",\"cf3\",\"cf4\",\"cf5\",\"cf6\")],                               gps_model = \"parametric\",                               internal_use = FALSE,                               params = list(xgb_max_depth = c(3,4,5),                                        xgb_nrounds=c(10,20,30,40,50,60)),                               nthread = 1,                               sl_lib = c(\"m_xgboost\")                              )"},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/estimate_hat_vals.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate hat (fitted) values — estimate_hat_vals","title":"Estimate hat (fitted) values — estimate_hat_vals","text":"Estimates fitted values based bandwidth value","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/estimate_hat_vals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate hat (fitted) values — estimate_hat_vals","text":"","code":"estimate_hat_vals(bw, matched_w, w_vals)"},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/estimate_hat_vals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate hat (fitted) values — estimate_hat_vals","text":"bw bandwidth value. matched_w vector continuous exposure variable matched set. w_vals vector values want calculate values ERF .","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/estimate_hat_vals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate hat (fitted) values — estimate_hat_vals","text":"Returns fitted values, prediction made model observation.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/estimate_npmetric_erf.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Smoothed Exposure-Response Function (ERF) for Matched Data Set. — estimate_npmetric_erf","title":"Estimate Smoothed Exposure-Response Function (ERF) for Matched Data Set. — estimate_npmetric_erf","text":"Estimate smoothed exposure-response function (ERF) matched weighted data set using non-parametric models.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/estimate_npmetric_erf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Smoothed Exposure-Response Function (ERF) for Matched Data Set. — estimate_npmetric_erf","text":"","code":"estimate_npmetric_erf(   matched_Y,   matched_w,   matched_counter = NULL,   bw_seq = seq(0.2, 2, 0.2),   w_vals,   nthread )"},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/estimate_npmetric_erf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Smoothed Exposure-Response Function (ERF) for Matched Data Set. — estimate_npmetric_erf","text":"matched_Y vector outcome variable matched set. matched_w vector continuous exposure variable matched set. matched_counter vector counter variable matched set. bw_seq vector bandwidth values (Default seq(0.2,2,0.2)). w_vals vector values want calculate values ERF . nthread number available cores.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/estimate_npmetric_erf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Smoothed Exposure-Response Function (ERF) for Matched Data Set. — estimate_npmetric_erf","text":"function returns gpsm_erf object. object includes following attributes: params matched_Y matched_w bw_seq w_vals erf fcall","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/estimate_npmetric_erf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate Smoothed Exposure-Response Function (ERF) for Matched Data Set. — estimate_npmetric_erf","text":"Estimate Functions Using Local Polynomial kernel regression Package: ‘KernSmooth’.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/estimate_npmetric_erf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Smoothed Exposure-Response Function (ERF) for Matched Data Set. — estimate_npmetric_erf","text":"","code":"set.seed(697) m_d <- generate_syn_data(sample_size = 200) pseudo_pop <- generate_pseudo_pop(m_d$Y,                                   m_d$treat,                                   m_d[c(\"cf1\",\"cf2\",\"cf3\",\"cf4\",\"cf5\",\"cf6\")],                                   ci_appr = \"matching\",                                   pred_model = \"sl\",                                   sl_lib = c(\"m_xgboost\"),                                   params = list(xgb_nrounds=c(10,20,30),                                    xgb_eta=c(0.1,0.2,0.3)),                                   nthread = 1,                                   optimized_compile = TRUE,                                   covar_bl_method = \"absolute\",                                   covar_bl_trs = 0.1,                                   covar_bl_trs_type=\"mean\",                                   max_attempt = 1,                                   matching_fun = \"matching_l1\",                                   delta_n = 1,                                   scale = 0.5) #> Mean absolute correlation:  0.233156732082237 | Covariate balance threshold:  0.1 #> Mean absolute correlation:  0.189639900251747 | Covariate balance threshold:  0.1 #> Covariate balance condition has not been met. #> Best Mean absolute correlation:  0.189639900251747 | Covariate balance threshold:  0.1  erf_obj <- estimate_npmetric_erf(pseudo_pop$pseudo_pop$Y,                                  pseudo_pop$pseudo_pop$w,                                  pseudo_pop$pseudo_pop$counter,                                  bw_seq=seq(0.2,2,0.2),                                  w_vals = seq(2,20,0.5),                                  nthread = 1)"},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/estimate_pmetric_erf.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Parametric Exposure Response Function — estimate_pmetric_erf","title":"Estimate Parametric Exposure Response Function — estimate_pmetric_erf","text":"Estimate constant effect size matched weighted data set using parametric models","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/estimate_pmetric_erf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Parametric Exposure Response Function — estimate_pmetric_erf","text":"","code":"estimate_pmetric_erf(formula, family, data, ci_appr)"},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/estimate_pmetric_erf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Parametric Exposure Response Function — estimate_pmetric_erf","text":"formula vector outcome variable matched set. family description error distribution (see ?gnm) data dataset formula build upon ci_appr causal inference approach (matching weighting).","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/estimate_pmetric_erf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Parametric Exposure Response Function — estimate_pmetric_erf","text":"returns object class gnm","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/estimate_pmetric_erf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate Parametric Exposure Response Function — estimate_pmetric_erf","text":"method uses generalized nonlinear model (gnm) gnm package.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/estimate_pmetric_erf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Parametric Exposure Response Function — estimate_pmetric_erf","text":"","code":"m_d <- generate_syn_data(sample_size = 100) pseudo_pop <- generate_pseudo_pop(m_d$Y,                                   m_d$treat,                                   m_d[c(\"cf1\",\"cf2\",\"cf3\",\"cf4\",\"cf5\",\"cf6\")],                                   ci_appr = \"matching\",                                   pred_model = \"sl\",                                   sl_lib = c(\"m_xgboost\"),                                   params = list(xgb_nrounds=c(10,20,30),                                    xgb_eta=c(0.1,0.2,0.3)),                                   nthread = 1,                                   covar_bl_method = \"absolute\",                                   covar_bl_trs = 0.1,                                   covar_bl_trs_type= \"mean\",                                   max_attempt = 1,                                   matching_fun = \"matching_l1\",                                   delta_n = 1,                                   scale = 0.5) #> Mean absolute correlation:  0.190532732398494 | Covariate balance threshold:  0.1 #> Mean absolute correlation:  0.149674153889077 | Covariate balance threshold:  0.1 #> Covariate balance condition has not been met. #> Best Mean absolute correlation:  0.149674153889077 | Covariate balance threshold:  0.1   outcome_m <- estimate_pmetric_erf(formula = Y ~ w,                                     family = gaussian,                                     data = pseudo_pop$pseudo_pop,                                     ci_appr = \"matching\")"},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/estimate_semipmetric_erf.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Semi-exposure-response Function (semi-ERF). — estimate_semipmetric_erf","title":"Estimate Semi-exposure-response Function (semi-ERF). — estimate_semipmetric_erf","text":"Estimates smoothed exposure-response function using generalized additive model splines.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/estimate_semipmetric_erf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Semi-exposure-response Function (semi-ERF). — estimate_semipmetric_erf","text":"","code":"estimate_semipmetric_erf(formula, family, data, ci_appr)"},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/estimate_semipmetric_erf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Semi-exposure-response Function (semi-ERF). — estimate_semipmetric_erf","text":"formula vector outcome variable matched set. family description error distribution (see ?gam). data dataset formula build upon. ci_appr causal inference approach (matching weighting).","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/estimate_semipmetric_erf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Semi-exposure-response Function (semi-ERF). — estimate_semipmetric_erf","text":"returns object class gam","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/estimate_semipmetric_erf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate Semi-exposure-response Function (semi-ERF). — estimate_semipmetric_erf","text":"approach uses Generalized Additive Model (gam) using mgcv package.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/estimate_semipmetric_erf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Semi-exposure-response Function (semi-ERF). — estimate_semipmetric_erf","text":"","code":"m_d <- generate_syn_data(sample_size = 100) pseudo_pop <- generate_pseudo_pop(m_d$Y,                                   m_d$treat,                                   m_d[c(\"cf1\",\"cf2\",\"cf3\",\"cf4\",\"cf5\",\"cf6\")],                                   ci_appr = \"matching\",                                   pred_model = \"sl\",                                   sl_lib = c(\"m_xgboost\"),                                   params = list(xgb_nrounds=c(10,20,30),                                    xgb_eta=c(0.1,0.2,0.3)),                                   nthread = 1,                                   covar_bl_method = \"absolute\",                                   covar_bl_trs = 0.1,                                   covar_bl_trs_type = \"mean\",                                   max_attempt = 1,                                   matching_fun = \"matching_l1\",                                   delta_n = 1,                                   scale = 0.5) #> Mean absolute correlation:  0.221667731370857 | Covariate balance threshold:  0.1 #> Mean absolute correlation:  0.150556845808525 | Covariate balance threshold:  0.1 #> Covariate balance condition has not been met. #> Best Mean absolute correlation:  0.150556845808525 | Covariate balance threshold:  0.1  outcome_m <- estimate_semipmetric_erf (formula = Y ~ w,                                        family = gaussian,                                        data = pseudo_pop$pseudo_pop,                                        ci_appr = \"matching\")"},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/gen_wrap_sl_lib.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate customized wrapper for SuperLearner libraries — gen_wrap_sl_lib","title":"Generate customized wrapper for SuperLearner libraries — gen_wrap_sl_lib","text":"function generates customized wrapper order access external libraries hyperparameters.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/gen_wrap_sl_lib.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate customized wrapper for SuperLearner libraries — gen_wrap_sl_lib","text":"","code":"gen_wrap_sl_lib(lib_name, params, nthread)"},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/gen_wrap_sl_lib.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate customized wrapper for SuperLearner libraries — gen_wrap_sl_lib","text":"lib_name library name (e.g., m_xgboost). params list includes key-values different parameters. relevant parameters extracted, others ignored. nthread Number threads available used external libraries (case can use ).","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/gen_wrap_sl_lib.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate customized wrapper for SuperLearner libraries — gen_wrap_sl_lib","text":"Returns list TRUE best used parameters, modified library given library implemented; otherwise, returns list FALSE. function also called side effects.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/generate_kernel.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate kernel function — generate_kernel","title":"Generate kernel function — generate_kernel","text":"Generates kernel function","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/generate_kernel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate kernel function — generate_kernel","text":"","code":"generate_kernel(t)"},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/generate_kernel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate kernel function — generate_kernel","text":"t standardized vector (z-score)","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/generate_kernel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate kernel function — generate_kernel","text":"probability distribution","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/generate_pseudo_pop.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Pseudo Population — generate_pseudo_pop","title":"Generate Pseudo Population — generate_pseudo_pop","text":"Generates pseudo population data set based user-defined causal inference approach. function uses adaptive approach satisfies covariate balance requirements. function terminates either satisfying covariate balance completing requested number iteration, whichever comes first.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/generate_pseudo_pop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Pseudo Population — generate_pseudo_pop","text":"","code":"generate_pseudo_pop(   Y,   w,   c,   ci_appr,   gps_model = \"parametric\",   use_cov_transform = FALSE,   transformers = list(\"pow2\", \"pow3\"),   bin_seq = NULL,   trim_quantiles = c(0.01, 0.99),   optimized_compile = FALSE,   params = list(),   sl_lib = c(\"m_xgboost\"),   nthread = 1,   ... )"},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/generate_pseudo_pop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Pseudo Population — generate_pseudo_pop","text":"Y vector observed outcome variable. w vector observed continuous exposure variable. c data.frame observed covariates variable. ci_appr causal inference approach. Possible values : \"matching\": Matching GPS \"weighting\": Weighting GPS gps_model Model type used estimating GPS value, including parametric (default) non-parametric. use_cov_transform TRUE, function uses transformer meet covariate balance. transformers list transformers. transformer unary function. can pass name customized function quotes. Available transformers: pow2: power 2 pow3: power 3 bin_seq Sequence w (treatment) generate pseudo population. NULL passed default value used, seq(min(w)+delta_n/2,max(w), =delta_n). trim_quantiles numerical vector two. Represents trim quantile level. numbers range [0,1] increasing order (default: c(0.01,0.99)). optimized_compile TRUE, uses counts keep track number replicated pseudo population. params Includes list params used internally. Unrelated parameters ignored. sl_lib vector prediction algorithms. nthread integer value represents number threads used internal packages. ... Additional arguments passed different models.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/generate_pseudo_pop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Pseudo Population — generate_pseudo_pop","text":"Returns pseudo population (gpsm_pspop) object generated augmented based selected causal inference approach (ci_appr). object includes following objects: params ci_appr params pseudo_pop adjusted_corr_results original_corr_results optimized_compile (True False) best_gps_used_params","code":""},{"path":[]},{"path":[]},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/generate_pseudo_pop.html","id":"causal-inference-approach-ci-appr-","dir":"Reference","previous_headings":"","what":"Causal Inference Approach (ci.appr)","title":"Generate Pseudo Population — generate_pseudo_pop","text":"ci.appr = 'matching': matching_fun: Matching function. Available options: matching_l1: Manhattan distance matching delta_n: caliper parameter. scale: specified scale parameter control relative weight attributed distance measures exposure versus GPS. covar_bl_method: covariate balance method. Available options: 'absolute' covar_bl_trs: covariate balance threshold covar_bl_trs_type: covariate balance type (mean, median, maximal) max_attempt: maximum number attempt satisfy covariate balance. See create_matching() details parameters default values. ci.appr = 'weighting': covar_bl_method: Covariate balance method. covar_bl_trs: Covariate balance threshold max_attempt: Maximum number attempt satisfy covariate balance.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/generate_pseudo_pop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Pseudo Population — generate_pseudo_pop","text":"","code":"m_d <- generate_syn_data(sample_size = 100) pseuoo_pop <- generate_pseudo_pop(m_d$Y,                                   m_d$treat,                                   m_d[c(\"cf1\",\"cf2\",\"cf3\",\"cf4\",\"cf5\",\"cf6\")],                                   ci_appr = \"matching\",                                   gps_model = \"parametric\",                                   bin_seq = NULL,                                   trim_quantiles = c(0.01,0.99),                                   optimized_compile = FALSE,                                   use_cov_transform = FALSE,                                   transformers = list(),                                   params = list(xgb_nrounds=c(10,20,30),                                                 xgb_eta=c(0.1,0.2,0.3)),                                   sl_lib = c(\"m_xgboost\"),                                   nthread = 1,                                   covar_bl_method = \"absolute\",                                   covar_bl_trs = 0.1,                                   covar_bl_trs_type= \"mean\",                                   max_attempt = 1,                                   matching_fun = \"matching_l1\",                                   delta_n = 1,                                   scale = 0.5) #> Mean absolute correlation:  0.187874919634512 | Covariate balance threshold:  0.1 #> Mean absolute correlation:  0.259346434375271 | Covariate balance threshold:  0.1 #> Covariate balance condition has not been met. #> Best Mean absolute correlation:  0.259346434375271 | Covariate balance threshold:  0.1"},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/generate_syn_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Synthetic Data for CausalGPS Package — generate_syn_data","title":"Generate Synthetic Data for CausalGPS Package — generate_syn_data","text":"Generates synthetic data set based different GPS models covariates.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/generate_syn_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Synthetic Data for CausalGPS Package — generate_syn_data","text":"","code":"generate_syn_data(   sample_size = 1000,   outcome_sd = 10,   gps_spec = 1,   cova_spec = 1 )"},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/generate_syn_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Synthetic Data for CausalGPS Package — generate_syn_data","text":"sample_size Number data samples. outcome_sd Standard deviation used generate outcome synthetic data set. gps_spec numerical value (1-7) indicates GPS model used generate synthetic data. See code details. cova_spec numerical value (1-2) modify covariates. See code details.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/generate_syn_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Synthetic Data for CausalGPS Package — generate_syn_data","text":"synthetic_data: function returns data.frame saved constructed synthetic data.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/generate_syn_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Synthetic Data for CausalGPS Package — generate_syn_data","text":"","code":"set.seed(298) s_data <- generate_syn_data(sample_size=100,                                   outcome_sd = 10, gps_spec = 1,                                   cova_spec = 1)"},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/get_logger.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Logger Settings — get_logger","title":"Get Logger Settings — get_logger","text":"Returns current logger settings.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/get_logger.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Logger Settings — get_logger","text":"","code":"get_logger()"},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/get_logger.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Logger Settings — get_logger","text":"Returns list includes logger_file_path logger_level.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/get_logger.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Logger Settings — get_logger","text":"","code":"set_logger(\"mylogger.log\", \"INFO\") log_meta <- get_logger()"},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/log_system_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Log system information — log_system_info","title":"Log system information — log_system_info","text":"Logs system related information log file.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/log_system_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log system information — log_system_info","text":"","code":"log_system_info()"},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/log_system_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log system information — log_system_info","text":"return value. function called side effects.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/matching_l1.html","id":null,"dir":"Reference","previous_headings":"","what":"Match observations — matching_l1","title":"Match observations — matching_l1","text":"Matching function using L1 distance single exposure level w","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/matching_l1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match observations — matching_l1","text":"","code":"matching_l1(   w,   dataset,   e_gps_pred,   e_gps_std_pred,   w_resid,   gps_mx,   w_mx,   gps_model = \"parametric\",   delta_n = 1,   scale = 0.5,   nthread = 1,   optimized_compile )"},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/matching_l1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match observations — matching_l1","text":"w targeted single exposure levels. dataset completed observational data frame matrix containing (Y, w, gps, counter, row_index, c). e_gps_pred vector predicted gps values obtained Machine learning methods. e_gps_std_pred vector predicted std gps obtained Machine learning methods. w_resid standardized residuals w. gps_mx vector length 2, includes min(gps), max(gps) w_mx vector length 2, includes min(w), max(w). gps_model Model type used estimating GPS value, including parametric (default) non-parametric. delta_n specified caliper parameter exposure (Default 1). scale specified scale parameter control relative weight attributed distance measures exposure versus GPS estimates (Default 0.5). nthread Number available cores. optimized_compile option activate optimized compilation.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/matching_l1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Match observations — matching_l1","text":"dp: function returns data.table saved matched points single exposure level w proposed GPS matching approaches.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/plot.gpsm_erf.html","id":null,"dir":"Reference","previous_headings":"","what":"Extend generic plot functions for gpsm_erf class — plot.gpsm_erf","title":"Extend generic plot functions for gpsm_erf class — plot.gpsm_erf","text":"wrapper function extend generic plot functions gpsm_erf class.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/plot.gpsm_erf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extend generic plot functions for gpsm_erf class — plot.gpsm_erf","text":"","code":"# S3 method for gpsm_erf plot(x, ...)"},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/plot.gpsm_erf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extend generic plot functions for gpsm_erf class — plot.gpsm_erf","text":"x gpsm_erf object. ... Additional arguments passed customize plot.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/plot.gpsm_erf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extend generic plot functions for gpsm_erf class — plot.gpsm_erf","text":"Returns ggplot2 object, invisibly. function called side effects.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/plot.gpsm_pspop.html","id":null,"dir":"Reference","previous_headings":"","what":"Extend generic plot functions for gpsm_erf class — plot.gpsm_pspop","title":"Extend generic plot functions for gpsm_erf class — plot.gpsm_pspop","text":"wrapper function extend generic plot functions gpsm_erf class.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/plot.gpsm_pspop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extend generic plot functions for gpsm_erf class — plot.gpsm_pspop","text":"","code":"# S3 method for gpsm_pspop plot(x, ...)"},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/plot.gpsm_pspop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extend generic plot functions for gpsm_erf class — plot.gpsm_pspop","text":"x gpsm_erf object. ... Additional arguments passed customize plot.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/plot.gpsm_pspop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extend generic plot functions for gpsm_erf class — plot.gpsm_pspop","text":"Returns ggplot2 object, invisibly. function called side effects.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/print.gpsm_erf.html","id":null,"dir":"Reference","previous_headings":"","what":"Extend print function for gpsm_erf object — print.gpsm_erf","title":"Extend print function for gpsm_erf object — print.gpsm_erf","text":"Extend print function gpsm_erf object","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/print.gpsm_erf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extend print function for gpsm_erf object — print.gpsm_erf","text":"","code":"# S3 method for gpsm_erf print(x, ...)"},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/print.gpsm_erf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extend print function for gpsm_erf object — print.gpsm_erf","text":"x gpsm_erf object. ... Additional arguments passed customize results.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/print.gpsm_erf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extend print function for gpsm_erf object — print.gpsm_erf","text":"return value. function called side effects.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/print.gpsm_pspop.html","id":null,"dir":"Reference","previous_headings":"","what":"Extend print function for gpsm_pspop object — print.gpsm_pspop","title":"Extend print function for gpsm_pspop object — print.gpsm_pspop","text":"Extend print function gpsm_pspop object","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/print.gpsm_pspop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extend print function for gpsm_pspop object — print.gpsm_pspop","text":"","code":"# S3 method for gpsm_pspop print(x, ...)"},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/print.gpsm_pspop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extend print function for gpsm_pspop object — print.gpsm_pspop","text":"x gpsm_pspop object. ... Additional arguments passed customize results.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/print.gpsm_pspop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extend print function for gpsm_pspop object — print.gpsm_pspop","text":"return value. function called side effects.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/set_logger.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Logger Settings — set_logger","title":"Set Logger Settings — set_logger","text":"Updates logger settings, including log level location file.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/set_logger.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Logger Settings — set_logger","text":"","code":"set_logger(logger_file_path = \"CausalGPS.log\", logger_level = \"INFO\")"},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/set_logger.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Logger Settings — set_logger","text":"logger_file_path path (including file name) log messages. (Default: CausalGPS.log) logger_level log level. Available levels include: TRACE DEBUG INFO (Default) SUCCESS WARN ERROR FATAL","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/set_logger.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set Logger Settings — set_logger","text":"return value. function called side effects.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/set_logger.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set Logger Settings — set_logger","text":"","code":"set_logger(\"Debug\")"},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/smooth_erf.html","id":null,"dir":"Reference","previous_headings":"","what":"Smooth exposure response function — smooth_erf","title":"Smooth exposure response function — smooth_erf","text":"Smooths exposure response function based bandwidth","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/smooth_erf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Smooth exposure response function — smooth_erf","text":"","code":"smooth_erf(matched_Y, bw, matched_w)"},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/smooth_erf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smooth exposure response function — smooth_erf","text":"matched_Y vector outcome variable matched set. bw bandwidth value. matched_w vector continuous exposure variable matched set.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/smooth_erf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Smooth exposure response function — smooth_erf","text":"Smoothed value ERF","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/summary.gpsm_erf.html","id":null,"dir":"Reference","previous_headings":"","what":"print summary of gpsm_erf object — summary.gpsm_erf","title":"print summary of gpsm_erf object — summary.gpsm_erf","text":"print summary gpsm_erf object","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/summary.gpsm_erf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"print summary of gpsm_erf object — summary.gpsm_erf","text":"","code":"# S3 method for gpsm_erf summary(object, ...)"},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/summary.gpsm_erf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"print summary of gpsm_erf object — summary.gpsm_erf","text":"object gpsm_erf object. ... Additional arguments passed customize results.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/summary.gpsm_erf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"print summary of gpsm_erf object — summary.gpsm_erf","text":"Returns summary data","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/summary.gpsm_pspop.html","id":null,"dir":"Reference","previous_headings":"","what":"print summary of gpsm_pspop object — summary.gpsm_pspop","title":"print summary of gpsm_pspop object — summary.gpsm_pspop","text":"print summary gpsm_pspop object","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/summary.gpsm_pspop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"print summary of gpsm_pspop object — summary.gpsm_pspop","text":"","code":"# S3 method for gpsm_pspop summary(object, ...)"},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/summary.gpsm_pspop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"print summary of gpsm_pspop object — summary.gpsm_pspop","text":"object gpsm_pspop object. ... Additional arguments passed customize results.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/summary.gpsm_pspop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"print summary of gpsm_pspop object — summary.gpsm_pspop","text":"Returns summary data","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/synthetic_us_2010.html","id":null,"dir":"Reference","previous_headings":"","what":"Public data set for air pollution and health studies,\ncase study: 2010 county-Level data set for the contiguous United States — synthetic_us_2010","title":"Public data set for air pollution and health studies,\ncase study: 2010 county-Level data set for the contiguous United States — synthetic_us_2010","text":"dataset containing exposure, confounders, outcome causal inference studies. dataset hosted Harvard dataverse doi:10.7910/DVN/L7YF2G . dataset produced five different resources. Please see https://github.com/NSAPH/synthetic_data/ data processing pipelines. following Exposure Data exposure parameter PM2.5. Di et al. (2019) provided daily, annual PM2.5 estimates 1 km×1 km grid cells entire United States. data can downloaded Di et al. (2021). Features category starts qd_ prefix. Census Data main reference getting census data United States Census Bureau. numerous studies surveys different geographical resolutions. use 2010 county level American County Survey county level (acs5). Features category starts cs_ prefix. CDC Data Centers Disease Control Prevention (CDC), provides Behavioral Risk Factor Surveillance System (Centers Disease Control Prevention (2021)), nation’s premier system health-related telephone surveys collect state data U.S. residents regarding health-related risk behaviors. GridMET Data Climatology Lab University California, Merced, provides GridMET data (Abatzoglou (2013)). data set daily surface meteorological data covering contiguous United States. CMS Data Centers Medicare Medicaid Services(CMS) provides synthetic data county level 2008-2010 (Centers Medicare & Medicaid Services (2021)). definition variables provided . data collected 2010 aggregated county level contiguous United States.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/synthetic_us_2010.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Public data set for air pollution and health studies,\ncase study: 2010 county-Level data set for the contiguous United States — synthetic_us_2010","text":"","code":"data(synthetic_us_2010)"},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/synthetic_us_2010.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Public data set for air pollution and health studies,\ncase study: 2010 county-Level data set for the contiguous United States — synthetic_us_2010","text":"data frame 3109 rows 46 variables: qd_mean_pm25 Mean PM2.5 (microgram/m3) cs_poverty proportion poverty level population among 65+ years old. cs_hispanic proportion Hispanic Latino population among 65+ years old. cs_black proportion Black African American population among 65+ years old. cs_white proportion White population among 65 years . cs_native proportion American Indian Alaska native population among 65 years . cs_asian proportion Asian population among 65 years . cs_other proportion races population among 65 years . cs_ed_below_highschool proportion population high school level education among 65 years . cs_household_income Median Household income past 12 months (2010 inflation-adjusted  dollars) householder 65 years . cs_median_house_value Median house value (USD) cs_total_population Total Population cs_area Area county (square miles) cs_population_density number population one square mile. cdc_mean_bmi Body Mass Index. cdc_pct_cusmoker proportion current smokers. cdc_pct_sdsmoker proportion days smokers. cdc_pct_fmsmoker proportion former smokers. cdc_pct_nvsmoker proportion never smokers. cdc_pct_nnsmoker proportion known smokers. gmet_mean_tmmn Annual mean daily minimum temperature (K) gmet_mean_summer_tmmn mean daily minimum temperature summer (K) gmet_mean_winter_tmmn mean daily minimum temperature winter (K) gmet_mean_tmmx Annual mean daily maximum temprature (K) gmet_mean_summer_tmmx mean daily maximum temperature summer (K) gmet_mean_winter_tmmx mean daily maximum temperature winter (K) gmet_mean_rmn Annual mean daily minimum relative humidity (%) gmet_mean_summer_rmn mean daily minimum relative humidity summer (%) gmet_mean_winter_rmn mean daily minimum relative humidity winter (%) gmet_mean_rmx Annual mean daily maximum relative humidity (%) gmet_mean_summer_rmx mean daily maximum relative humidity summer (%) gmet_mean_winter_rmx mean daily maximum relative humidity winter (%) gmet_mean_sph Annual mean daily mean specific humidity (kg/kg) gmet_mean_summer_sph mean daily mean specific humidity summer(kg/kg) gmet_mean_winter_sph mean daily mean specific humidity winter(kg/kg) cms_mortality_pct proportion deceased patients. cms_white_pct proportion White patients. cms_black_pct proportion Black patients. cms_hispanic_pct proportion Hispanic patients. cms_others_pct proportion patients. cms_female_pct proportion Female patients. region region county located .   FIPS Federal Information Processing Standards, unique ID county. NAME County, State name. STATE State abbreviation. STATE_CODE State numerical code.","code":"NORTHEAST=(\"NY\",\"MA\",\"PA\",\"RI\",\"NH\",\"ME\",\"VT\",\"CT\",\"NJ\")   SOUTH=(\"DC\",\"VA\",\"NC\",\"WV\",\"KY\",\"SC\",\"GA\",\"FL\",\"AL\",\"TN\",\"MS\",\"AR\",\"MD\",\"DE\",\"OK\",\"TX\",\"LA\")   MIDWEST=c(\"OH\",\"IN\",\"MI\",\"IA\",\"MO\",\"WI\",\"MN\",\"SD\",\"ND\",\"IL\",\"KS\",\"NE\")   WEST=c(\"MT\",\"CO\",\"WY\",\"ID\",\"UT\",\"NV\",\"CA\",\"OR\",\"WA\",\"AZ\",\"NM\")"},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/synthetic_us_2010.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Public data set for air pollution and health studies,\ncase study: 2010 county-Level data set for the contiguous United States — synthetic_us_2010","text":"Abatzoglou, John T. 2013. “Development Gridded Surface Meteorological Data Ecological Applications Modelling.” International Journal Climatology 33 (1): 121–31. doi:10.1002/joc.3413 . Centers Disease Control Prevention. 2021. “Behavioral Risk Factor Surveillance System.” https://www.cdc.gov/brfss/annual_data/annual_2010.htm/. Centers Medicare & Medicaid Services. 2021. “CMS 2008-2010 Data Entrepreneurs’ Synthetic Public Use File (DE-SynPUF).” https://www.cms.gov/research-statistics-data--systems/downloadable-public-use-files/synpufs/de_syn_puf. Di, Qian, Heresh Amini, Liuhua Shi, Itai Kloog, Rachel Silvern, James Kelly, M Benjamin Sabath, et al. 2019. “Ensemble-Based Model Pm2. 5 Concentration Across Contiguous United States High Spatiotemporal Resolution.” Environment International 130: 104909. doi:10.1016/j.envint.2019.104909 . Di, Qian, Yaguang Wei, Alexandra Shtein, Carolynne Hultquist, Xiaoshi Xing, Heresh Amini, Liuhua Shi, et al. 2021. “Daily Annual Pm2.5 Concentrations Contiguous United States, 1-Km Grids, V1 (2000 - 2016).” NASA Socioeconomic Data; Applications Center (SEDAC). doi:10.7927/0rvr-4538 .","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/train_it.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Prediction Model — train_it","title":"Generate Prediction Model — train_it","text":"Function develop prediction model based user's preferences.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/train_it.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Prediction Model — train_it","text":"","code":"train_it(target, input, sl_lib_internal = NULL, ...)"},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/train_it.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Prediction Model — train_it","text":"target vector target data. input vector, matrix, dataframe input data. sl_lib_internal internal library used SuperLearner ... Model related parameters provided.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/train_it.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Prediction Model — train_it","text":"prediction model","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/transform_it.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform data — transform_it","title":"Transform data — transform_it","text":"Transforms data new values.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/transform_it.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform data — transform_it","text":"","code":"transform_it(c_name, c_val, transformer)"},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/transform_it.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform data — transform_it","text":"c_name column (attribute) name. c_val column value transformer transformer function.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/transform_it.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform data — transform_it","text":"Returns transformed data.frame.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/w_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function — w_fun","title":"Helper function — w_fun","text":"Helper function","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/w_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function — w_fun","text":"","code":"w_fun(bw, matched_w, w_vals)"},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/w_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function — w_fun","text":"bw bandwidth value matched_w vector continuous exposure variable matched set. w_vals vector values want calculate values ERF .","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/reference/w_fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function — w_fun","text":"return value (TODO)","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/news/index.html","id":"causalgps-028-2022-06-22","dir":"Changelog","previous_headings":"","what":"CausalGPS 0.2.8 (2022-06-22)","title":"CausalGPS 0.2.8 (2022-06-22)","text":"CRAN release: 2022-06-22","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/news/index.html","id":"fixed-0-2-8","dir":"Changelog","previous_headings":"","what":"Fixed","title":"CausalGPS 0.2.8 (2022-06-22)","text":"Message implemented methods changed reduce misunderstanding. Empty counter raise error estimating non-parameteric response function.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/news/index.html","id":"changed-0-2-8","dir":"Changelog","previous_headings":"","what":"Changed","title":"CausalGPS 0.2.8 (2022-06-22)","text":"matching_l1 returns frequency table instead entire vector. Vectorized population compilation used data.table multi-thread assignment. Removed nested parallelism compiling pseudo population, results close control memory. estimate_npmetric_erf also returns optimal h risk values.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/news/index.html","id":"added-0-2-8","dir":"Changelog","previous_headings":"","what":"Added","title":"CausalGPS 0.2.8 (2022-06-22)","text":"estimate_gps returns optimal hyperparameters. estimate_gps returns S3 object. Internal xgboost approach support verbose parameter. Pseudo-population object now report parameters used best covariate balance.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/news/index.html","id":"causalgps-027-2022-02-04","dir":"Changelog","previous_headings":"","what":"CausalGPS 0.2.7 (2022-02-04)","title":"CausalGPS 0.2.7 (2022-02-04)","text":"CRAN release: 2022-02-07","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/news/index.html","id":"fixed-0-2-7","dir":"Changelog","previous_headings":"","what":"Fixed","title":"CausalGPS 0.2.7 (2022-02-04)","text":"Naming covariate balance scores.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/news/index.html","id":"changed-0-2-7","dir":"Changelog","previous_headings":"","what":"Changed","title":"CausalGPS 0.2.7 (2022-02-04)","text":"Restarting adaptive approach keep trying maximum attempt.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/news/index.html","id":"added-0-2-7","dir":"Changelog","previous_headings":"","what":"Added","title":"CausalGPS 0.2.7 (2022-02-04)","text":"Synthetic data (synthetic_us_2010) Check defined covariate balance (absolute_corr_fun, absolute_weighted_corr_fun) Covariate balance threshold type: mean, median, maximal. Improved test coverage. Singularity definition file.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/news/index.html","id":"causalgps-026-2021-09-06","dir":"Changelog","previous_headings":"","what":"CausalGPS 0.2.6 (2021-09-06)","title":"CausalGPS 0.2.6 (2021-09-06)","text":"CRAN release: 2021-09-06","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/news/index.html","id":"added-0-2-6","dir":"Changelog","previous_headings":"","what":"Added","title":"CausalGPS 0.2.6 (2021-09-06)","text":"added status optimized compile generate_pseudo_pop function output. compute_closest_wgps accepts number user-defined threads.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/news/index.html","id":"changed-0-2-6","dir":"Changelog","previous_headings":"","what":"Changed","title":"CausalGPS 0.2.6 (2021-09-06)","text":"Vignette file names. trim condition > < >= <=. Removed seed input generate_syn_data function. R package, setting seed value inside function recommended. Users can set seed using function. OpenMP uses user defined number cores.","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/news/index.html","id":"fixed-0-2-6","dir":"Changelog","previous_headings":"","what":"Fixed","title":"CausalGPS 0.2.6 (2021-09-06)","text":"Initial covariate balance weighted approach. counter column preallocated correctly. Counter value compiling. initial value set one, , however, zero correct one. Private variable issue OpenMP. Fixed OpenMP option macOS checks.","code":""},{"path":[]},{"path":"https://NSAPH-Software.github.io/CausalGPS/news/index.html","id":"causalgps-025-2021-07-23","dir":"Changelog","previous_headings":"","what":"CausalGPS 0.2.5 (2021-07-23)","title":"CausalGPS 0.2.5 (2021-07-23)","text":"CRAN release: 2021-07-23","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/news/index.html","id":"changed-0-2-5","dir":"Changelog","previous_headings":"","what":"Changed","title":"CausalGPS 0.2.5 (2021-07-23)","text":"User needs activate logger","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/news/index.html","id":"fixed-0-2-5","dir":"Changelog","previous_headings":"","what":"Fixed","title":"CausalGPS 0.2.5 (2021-07-23)","text":"CRAN package URLs canonical forms.","code":""},{"path":[]},{"path":"https://NSAPH-Software.github.io/CausalGPS/news/index.html","id":"added-0-2-4","dir":"Changelog","previous_headings":"","what":"Added","title":"CausalGPS 0.2.4 (2021-07-11)","text":"OpenMP Rcpp code optimized_compile log_system_info() Frequently asked questions logo","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/news/index.html","id":"changed-0-2-4","dir":"Changelog","previous_headings":"","what":"Changed","title":"CausalGPS 0.2.4 (2021-07-11)","text":"estimate_gps.Rmd estimate_semi_erf -> estimate_semipmetric_erf estimate_erf -> estimate_npmetric_erf estimate_hr -> estimate_pmetric_erf gen_pseudo_pop -> generate_pseudo_pop gen_syn_data -> generate_syn_data estimate_erf accepts counter input estimate_erf can use multiple cores generating_pseudo_population.Rmd estimate_erf function description estimate_hr function description estimate_semi_erf function description compute_risk function description return value outcome_models.Rmd generate_synthetic_data.Rmd","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/news/index.html","id":"fixed-0-2-4","dir":"Changelog","previous_headings":"","what":"Fixed","title":"CausalGPS 0.2.4 (2021-07-11)","text":"Rcpp parLapply worker processors arguments","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/news/index.html","id":"removed-0-2-4","dir":"Changelog","previous_headings":"","what":"Removed","title":"CausalGPS 0.2.4 (2021-07-11)","text":"running_appr","code":""},{"path":[]},{"path":"https://NSAPH-Software.github.io/CausalGPS/news/index.html","id":"fixed-0-2-3","dir":"Changelog","previous_headings":"","what":"Fixed","title":"CausalGPS 0.2.3 (2021-05-12)","text":"Fixed documentations","code":""},{"path":[]},{"path":"https://NSAPH-Software.github.io/CausalGPS/news/index.html","id":"added-0-2-2","dir":"Changelog","previous_headings":"","what":"Added","title":"CausalGPS 0.2.2 (2021-05-12)","text":"estimate_semi_erf estimate_hr","code":""},{"path":"https://NSAPH-Software.github.io/CausalGPS/news/index.html","id":"changed-0-2-2","dir":"Changelog","previous_headings":"","what":"Changed","title":"CausalGPS 0.2.2 (2021-05-12)","text":"Package name: GPSmatching –> CausalGPS","code":""}]
